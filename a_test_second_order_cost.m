% Generated by  0.6.2-5215
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=f
%  - independents=x
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_test_second_order_cost, rec_test_second_order_cost,
%  ret_test_second_order_cost
%

function [a_x nr_f] = a_test_second_order_cost(x, params, a_f)
%     L = params.L;
   tmpca1 = 0;
   tmpca2 = 0;
   W = params.W;
   M = params.M;
   tmpda4 = W - 1;
   tmpda3 = zeros(tmpda4, 1);
   tmpda2 = W - 1;
   tmpda1 = zeros(tmpda2, 1);
   x_padded = [tmpda1
         x
         tmpda3];
   M_x = zeros(W, 1);
   count = length(x_padded) - (W - 1);
   y = zeros(W, 1);
   ffty = zeros(W, 1);
   tmpfra1_2 = count;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda2);
      tmpda2 = W - 1;
      adimat_push1(tmpda1);
      tmpda1 = k + (0 : tmpda2);
      adimat_push1(y);
      y = x_padded(tmpda1);
      adimat_push1(ffty);
      ffty = fft(y);
      adimat_push1(tmpca2);
      tmpca2 = conj(ffty);
      adimat_push1(tmpca1);
      tmpca1 = ffty .* tmpca2;
      adimat_push1(M_x);
      M_x = M_x + tmpca1;
   end
   adimat_push(tmpfra1_2, M_x);
   M_x = M_x / count;
   tmpca3 = M - M_x;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   f = .5 * tmpca1;
   nr_f = f;
   [a_x_padded a_M_x a_y a_ffty a_tmpca1 a_tmpca2 a_tmpca3 a_x] = a_zeros(x_padded, M_x, y, ffty, tmpca1, tmpca2, tmpca3, x);
   if nargin < 3
      a_f = a_zeros1(f);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, .5, a_f));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   a_M_x = adimat_adjsum(a_M_x, adimat_adjred(M_x, -a_tmpca3));
   M_x = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(M_x, count, a_M_x);
   tmpsa1 = a_M_x;
   a_M_x = a_zeros1(M_x);
   a_M_x = adimat_adjsum(a_M_x, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      M_x = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_M_x));
      tmpsa1 = a_M_x;
      a_M_x = a_zeros1(M_x);
      a_M_x = adimat_adjsum(a_M_x, adimat_adjred(M_x, tmpsa1));
      tmpca1 = adimat_pop1;
      a_ffty = adimat_adjsum(a_ffty, adimat_adjred(ffty, a_tmpca1 .* tmpca2));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, ffty .* a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_ffty = adimat_adjsum(a_ffty, call(@conj, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      ffty = adimat_pop1;
      a_y = adimat_adjsum(a_y, a_fft(a_ffty, 1, y));
      a_ffty = a_zeros1(ffty);
      y = adimat_pop1;
      a_x_padded(tmpda1) = adimat_adjsum(a_x_padded(tmpda1), a_y);
      a_y = a_zeros1(y);
      [tmpda1 tmpda2] = adimat_pop;
   end
   a_x = adimat_adjsum(a_x, a_vertcat(a_x_padded, tmpda1, x));
end

function f = rec_test_second_order_cost(x, params)
   tmpca1 = 0;
   tmpca2 = 0;
   W = params.W;
   M = params.M;
   tmpda4 = W - 1;
   tmpda3 = zeros(tmpda4, 1);
   tmpda2 = W - 1;
   tmpda1 = zeros(tmpda2, 1);
   x_padded = [tmpda1
         x
         tmpda3];
   M_x = zeros(W, 1);
   count = length(x_padded) - (W - 1);
   y = zeros(W, 1);
   ffty = zeros(W, 1);
   tmpfra1_2 = count;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda2);
      tmpda2 = W - 1;
      adimat_push1(tmpda1);
      tmpda1 = k + (0 : tmpda2);
      adimat_push1(y);
      y = x_padded(tmpda1);
      adimat_push1(ffty);
      ffty = fft(y);
      adimat_push1(tmpca2);
      tmpca2 = conj(ffty);
      adimat_push1(tmpca1);
      tmpca1 = ffty .* tmpca2;
      adimat_push1(M_x);
      M_x = M_x + tmpca1;
   end
   adimat_push(tmpfra1_2, M_x);
   M_x = M_x / count;
   tmpca3 = M - M_x;
   adimat_push1(tmpca2);
   tmpca2 = tmpca3 .^ 2;
   adimat_push1(tmpca1);
   tmpca1 = sum(tmpca2);
   f = .5 * tmpca1;
   adimat_push(W, M, x_padded, M_x, count, y, ffty, k, tmpca1, tmpca2, tmpca3, tmpda1, tmpda2, tmpda3, tmpda4, f, x);
   if nargin > 1
      adimat_push1(params);
   end
   adimat_push1(nargin);
end

function a_x = ret_test_second_order_cost(a_f)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      params = adimat_pop1;
   end
   [x f tmpda4 tmpda3 tmpda2 tmpda1 tmpca3 tmpca2 tmpca1 k ffty y count M_x x_padded M W] = adimat_pop;
   [a_x_padded a_M_x a_y a_ffty a_tmpca1 a_tmpca2 a_tmpca3 a_x] = a_zeros(x_padded, M_x, y, ffty, tmpca1, tmpca2, tmpca3, x);
   if nargin < 1
      a_f = a_zeros1(f);
   end
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, .5, a_f));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmpca1, tmpca2));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, 2 .* tmpca3.^1 .* a_tmpca2));
   a_tmpca2 = a_zeros1(tmpca2);
   a_M_x = adimat_adjsum(a_M_x, adimat_adjred(M_x, -a_tmpca3));
   M_x = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(M_x, count, a_M_x);
   tmpsa1 = a_M_x;
   a_M_x = a_zeros1(M_x);
   a_M_x = adimat_adjsum(a_M_x, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      M_x = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_M_x));
      tmpsa1 = a_M_x;
      a_M_x = a_zeros1(M_x);
      a_M_x = adimat_adjsum(a_M_x, adimat_adjred(M_x, tmpsa1));
      tmpca1 = adimat_pop1;
      a_ffty = adimat_adjsum(a_ffty, adimat_adjred(ffty, a_tmpca1 .* tmpca2));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, ffty .* a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      tmpca2 = adimat_pop1;
      a_ffty = adimat_adjsum(a_ffty, call(@conj, a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      ffty = adimat_pop1;
      a_y = adimat_adjsum(a_y, a_fft(a_ffty, 1, y));
      a_ffty = a_zeros1(ffty);
      y = adimat_pop1;
      a_x_padded(tmpda1) = adimat_adjsum(a_x_padded(tmpda1), a_y);
      a_y = a_zeros1(y);
      [tmpda1 tmpda2] = adimat_pop;
   end
   a_x = adimat_adjsum(a_x, a_vertcat(a_x_padded, tmpda1, x));
end
