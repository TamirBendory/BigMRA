% Generated by  0.6.2-5215
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=f
%  - independents=x
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_least_squares_cost, rec_least_squares_cost,
%  ret_least_squares_cost, a_moments_from_signal_with_bias, rec_moments_from_signal_with_bias,
%  ret_moments_from_signal_with_bias, a_moments_from_data_no_debias, rec_moments_from_data_no_debias,
%  ret_moments_from_data_no_debias, a_circshift_ad, rec_circshift_ad,
%  ret_circshift_ad
%

function [a_x nr_f] = a_least_squares_cost(x, params, a_f)
   M1 = params.M1;
   M2 = params.M2;
   M3 = params.M3;
   sigma = params.sigma;
   N = params.N;
   m = params.m;
   W = params.W;
   [M1x M2x M3x] = rec_moments_from_signal_with_bias(x, W, N, m, sigma);
   w1 = 1;
   w2 = 1 / W;
   w3 = 1 / W^2;
   tmpca2 = M1 - M1x;
   tmpca1 = tmpca2 ^ 2;
   f = w1 * tmpca1;
   tmpca4 = M2 - M2x;
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w2 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   M3_diff = M3(:) - M3x(:);
   adimat_push1(tmpca3);
   tmpca3 = M3_diff .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w3 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   adimat_push1(f);
   f = f / m;
   nr_f = f;
   [a_M1x a_M2x a_M3x a_M3_diff a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_x] = a_zeros(M1x, M2x, M3x, M3_diff, tmpca1, tmpca2, tmpca3, tmpca4, x);
   if nargin < 3
      a_f = a_zeros1(f);
   end
   f = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(f, m, a_f);
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, tmpadjc1);
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w3, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_M3_diff = adimat_adjsum(a_M3_diff, adimat_adjred(M3_diff, 2 .* M3_diff.^1 .* a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   a_M3x(:) = adimat_adjsum(a_M3x(:), adimat_adjred(M3x(:), -a_M3_diff));
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_M2x = adimat_adjsum(a_M2x, adimat_adjred(M2x, -a_tmpca4));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w1, a_f));
   [tmpadjc1] = adimat_a_mpowerl(tmpca2, 2, a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc1);
   a_M1x = adimat_adjsum(a_M1x, adimat_adjred(M1x, -a_tmpca2));
   [tmpadjc1] = ret_moments_from_signal_with_bias(a_M1x, a_M2x, a_M3x);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end

function f = rec_least_squares_cost(x, params)
   M1 = params.M1;
   M2 = params.M2;
   M3 = params.M3;
   sigma = params.sigma;
   N = params.N;
   m = params.m;
   W = params.W;
   [M1x M2x M3x] = rec_moments_from_signal_with_bias(x, W, N, m, sigma);
   w1 = 1;
   w2 = 1 / W;
   w3 = 1 / W^2;
   tmpca2 = M1 - M1x;
   tmpca1 = tmpca2 ^ 2;
   f = w1 * tmpca1;
   tmpca4 = M2 - M2x;
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w2 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   M3_diff = M3(:) - M3x(:);
   adimat_push1(tmpca3);
   tmpca3 = M3_diff .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w3 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   adimat_push1(f);
   f = f / m;
   adimat_push(M1, M2, M3, sigma, N, m, W, M1x, M2x, M3x, w1, w2, w3, M3_diff, tmpca1, tmpca2, tmpca3, tmpca4, f, x);
   if nargin > 1
      adimat_push1(params);
   end
   adimat_push1(nargin);
end

function a_x = ret_least_squares_cost(a_f)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      params = adimat_pop1;
   end
   [x f tmpca4 tmpca3 tmpca2 tmpca1 M3_diff w3 w2 w1 M3x M2x M1x W m N sigma M3 M2 M1] = adimat_pop;
   [a_M1x a_M2x a_M3x a_M3_diff a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_x] = a_zeros(M1x, M2x, M3x, M3_diff, tmpca1, tmpca2, tmpca3, tmpca4, x);
   if nargin < 1
      a_f = a_zeros1(f);
   end
   f = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(f, m, a_f);
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, tmpadjc1);
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w3, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_M3_diff = adimat_adjsum(a_M3_diff, adimat_adjred(M3_diff, 2 .* M3_diff.^1 .* a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   a_M3x(:) = adimat_adjsum(a_M3x(:), adimat_adjred(M3x(:), -a_M3_diff));
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_M2x = adimat_adjsum(a_M2x, adimat_adjred(M2x, -a_tmpca4));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w1, a_f));
   [tmpadjc1] = adimat_a_mpowerl(tmpca2, 2, a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc1);
   a_M1x = adimat_adjsum(a_M1x, adimat_adjred(M1x, -a_tmpca2));
   [tmpadjc1] = ret_moments_from_signal_with_bias(a_M1x, a_M2x, a_M3x);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end

function [a_x nr_M1 nr_M2 nr_M3] = a_moments_from_signal_with_bias(x, W, N, m, sigma, a_M1, a_M2, a_M3)
% Inputs:
%   x is a signal of length L
%   W is the window length (maximum shift used in computing correlations)
%   N is the length of a long observation y
%   m is the number of times x is supposed to appear in a long observation y
%   sigma is the noise standard deviation (iid standard Gaussian, white noise)
% Zero-pad x
   tmpda1 = zeros(W, 1);
   x_zp = [x(:)
         tmpda1];
   [M1 M2 M3] = rec_moments_from_data_no_debias(x_zp, W);
   adimat_push1(M1);
   M1 = M1 * m;
   adimat_push1(M2);
   M2 = M2 * m;
   tmpda2 = sigma ^ 2;
   adimat_push1(tmpda1);
   tmpda1 = N * tmpda2;
   tmplia1 = M2(1) + tmpda1;
   adimat_push_index1(M2, 1);
   M2(1) = tmplia1;
   adimat_push1(M3);
   M3 = M3 * m;
   A = eye(W);
   adimat_push_index2(A, ':', 1);
   A(:, 1) = A(:, 1) + 1;
   adimat_push_index2(A, 1, ':');
   A(1, :) = A(1, :) + 1;
   tmpda3 = sigma ^ 2;
   tmpca2 = M1 * tmpda3;
   tmpca1 = tmpca2 * A;
   adimat_push1(M3);
   M3 = M3 + tmpca1;
   nr_M1 = M1;
   nr_M2 = M2;
   nr_M3 = M3;
   [a_x_zp a_tmpca1 a_tmpca2 a_tmplia1 a_x] = a_zeros(x_zp, tmpca1, tmpca2, tmplia1, x);
   if nargin < 6
      a_M1 = a_zeros1(M1);
   end
   if nargin < 7
      a_M2 = a_zeros1(M2);
   end
   if nargin < 8
      a_M3 = a_zeros1(M3);
   end
   M3 = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_M3));
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjred(M3, tmpsa1));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, A));
   a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca2, tmpda3));
   A = adimat_pop_index2(A, 1, ':');
   A = adimat_pop_index2(A, ':', 1);
   M3 = adimat_pop1;
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjmultl(M3, tmpsa1, m));
   M2 = adimat_pop_index1(M2, 1);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M2(1))));
   a_M2 = a_zeros_index1(a_M2, M2, 1);
   a_M2(1) = adimat_adjsum(a_M2(1), adimat_adjred(M2(1), a_tmplia1));
   [tmpda1 M2] = adimat_pop;
   tmpsa1 = a_M2;
   a_M2 = a_zeros1(M2);
   a_M2 = adimat_adjsum(a_M2, adimat_adjmultl(M2, tmpsa1, m));
   M1 = adimat_pop1;
   tmpsa1 = a_M1;
   a_M1 = a_zeros1(M1);
   a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, tmpsa1, m));
   [tmpadjc1] = ret_moments_from_data_no_debias(a_M1, a_M2, a_M3);
   a_x_zp = adimat_adjsum(a_x_zp, tmpadjc1);
   a_x(:) = adimat_adjsum(a_x(:), a_vertcat(a_x_zp, x(:)));
end

function [M1 M2 M3] = rec_moments_from_signal_with_bias(x, W, N, m, sigma)
   tmpda1 = zeros(W, 1);
   x_zp = [x(:)
         tmpda1];
   [M1 M2 M3] = rec_moments_from_data_no_debias(x_zp, W);
   adimat_push1(M1);
   M1 = M1 * m;
   adimat_push1(M2);
   M2 = M2 * m;
   tmpda2 = sigma ^ 2;
   adimat_push1(tmpda1);
   tmpda1 = N * tmpda2;
   tmplia1 = M2(1) + tmpda1;
   adimat_push_index1(M2, 1);
   M2(1) = tmplia1;
   adimat_push1(M3);
   M3 = M3 * m;
   A = eye(W);
   adimat_push_index2(A, ':', 1);
   A(:, 1) = A(:, 1) + 1;
   adimat_push_index2(A, 1, ':');
   A(1, :) = A(1, :) + 1;
   tmpda3 = sigma ^ 2;
   tmpca2 = M1 * tmpda3;
   tmpca1 = tmpca2 * A;
   adimat_push1(M3);
   M3 = M3 + tmpca1;
   adimat_push(x_zp, A, tmpca1, tmpca2, tmpda1, tmpda2, tmpda3, tmplia1, M1, M2, M3, x);
   if nargin > 1
      adimat_push1(W);
   end
   if nargin > 2
      adimat_push1(N);
   end
   if nargin > 3
      adimat_push1(m);
   end
   if nargin > 4
      adimat_push1(sigma);
   end
   adimat_push1(nargin);
end

function a_x = ret_moments_from_signal_with_bias(a_M1, a_M2, a_M3)
   tmpnargin = adimat_pop1;
   if tmpnargin > 4
      sigma = adimat_pop1;
   end
   if tmpnargin > 3
      m = adimat_pop1;
   end
   if tmpnargin > 2
      N = adimat_pop1;
   end
   if tmpnargin > 1
      W = adimat_pop1;
   end
   [x M3 M2 M1 tmplia1 tmpda3 tmpda2 tmpda1 tmpca2 tmpca1 A x_zp] = adimat_pop;
   [a_x_zp a_tmpca1 a_tmpca2 a_tmplia1 a_x] = a_zeros(x_zp, tmpca1, tmpca2, tmplia1, x);
   if nargin < 1
      a_M1 = a_zeros1(M1);
   end
   if nargin < 2
      a_M2 = a_zeros1(M2);
   end
   if nargin < 3
      a_M3 = a_zeros1(M3);
   end
   M3 = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_M3));
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjred(M3, tmpsa1));
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, A));
   a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca2, tmpda3));
   A = adimat_pop_index2(A, 1, ':');
   A = adimat_pop_index2(A, ':', 1);
   M3 = adimat_pop1;
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjmultl(M3, tmpsa1, m));
   M2 = adimat_pop_index1(M2, 1);
   a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M2(1))));
   a_M2 = a_zeros_index1(a_M2, M2, 1);
   a_M2(1) = adimat_adjsum(a_M2(1), adimat_adjred(M2(1), a_tmplia1));
   [tmpda1 M2] = adimat_pop;
   tmpsa1 = a_M2;
   a_M2 = a_zeros1(M2);
   a_M2 = adimat_adjsum(a_M2, adimat_adjmultl(M2, tmpsa1, m));
   M1 = adimat_pop1;
   tmpsa1 = a_M1;
   a_M1 = a_zeros1(M1);
   a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, tmpsa1, m));
   [tmpadjc1] = ret_moments_from_data_no_debias(a_M1, a_M2, a_M3);
   a_x_zp = adimat_adjsum(a_x_zp, tmpadjc1);
   a_x(:) = adimat_adjsum(a_x(:), a_vertcat(a_x_zp, x(:)));
end

function [a_y nr_M1 nr_M2 nr_M3] = a_moments_from_data_no_debias(y, W, a_M1, a_M2, a_M3)
% Inputs:
%     y is the long observation
%     W is the window length (maximum shift used in computing correlations)
% First order moment
   tmpca2 = 0;
   tmpca3 = 0;
   tmpca4 = 0;
   tmpca5 = 0;
   tmpca6 = 0;
   tmpda1 = 0;
   tmpda2 = 0;
   tmplia1 = 0;
   j = 0;
   M1 = sum(y);
   M2 = zeros(W, 1);
   tmpfra1_2 = W - 1;
   for k=0 : tmpfra1_2
      adimat_push1(tmpca3);
      tmpca3 = rec_circshift_ad(y, k);
      adimat_push1(tmpca2);
      tmpca2 = y .* tmpca3;
      adimat_push1(tmpda1);
      tmpda1 = k + 1;
      adimat_push1(tmplia1);
      tmplia1 = sum(tmpca2);
      adimat_push_index1(M2, tmpda1);
      M2(tmpda1) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   M3 = zeros(W, W);
   tmpfra1_2 = W - 1;
   adimat_push1(k);
   for k=0 : tmpfra1_2
      tmpfra2_2 = W - 1;
      adimat_push1(j);
      for j=0 : tmpfra2_2
         adimat_push1(tmpca6);
         tmpca6 = rec_circshift_ad(y, j);
         adimat_push1(tmpca5);
         tmpca5 = rec_circshift_ad(y, k);
         adimat_push1(tmpca4);
         tmpca4 = y .* tmpca5;
         adimat_push1(tmpca3);
         tmpca3 = tmpca4 .* tmpca6;
         adimat_push1(tmpda2);
         tmpda2 = j + 1;
         adimat_push1(tmpda1);
         tmpda1 = k + 1;
         adimat_push1(tmplia1);
         tmplia1 = sum(tmpca3);
         adimat_push_index2(M3, tmpda1, tmpda2);
         M3(tmpda1, tmpda2) = tmplia1;
      end
      adimat_push1(tmpfra2_2);
   end
   adimat_push1(tmpfra1_2);
   nr_M1 = M1;
   nr_M2 = M2;
   nr_M3 = M3;
   [a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_tmpca6 a_tmplia1 a_y] = a_zeros(tmpca2, tmpca3, tmpca4, tmpca5, tmpca6, tmplia1, y);
   if nargin < 3
      a_M1 = a_zeros1(M1);
   end
   if nargin < 4
      a_M2 = a_zeros1(M2);
   end
   if nargin < 5
      a_M3 = a_zeros1(M3);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(0 : tmpfra1_2)
      tmpfra2_2 = adimat_pop1;
      for j=fliplr(0 : tmpfra2_2)
         M3 = adimat_pop_index2(M3, tmpda1, tmpda2);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M3(tmpda1, tmpda2))));
         a_M3 = a_zeros_index2(a_M3, M3, tmpda1, tmpda2);
         tmplia1 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmplia1, tmpca3));
         a_tmplia1 = a_zeros1(tmplia1);
         [tmpda1 tmpda2 tmpca3] = adimat_pop;
         a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca3 .* tmpca6));
         a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, tmpca4 .* a_tmpca3));
         a_tmpca3 = a_zeros1(tmpca3);
         tmpca4 = adimat_pop1;
         a_y = adimat_adjsum(a_y, adimat_adjred(y, a_tmpca4 .* tmpca5));
         a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, y .* a_tmpca4));
         a_tmpca4 = a_zeros1(tmpca4);
         [tmpadjc1] = ret_circshift_ad(a_tmpca5);
         tmpca5 = adimat_pop1;
         a_y = adimat_adjsum(a_y, tmpadjc1);
         a_tmpca5 = a_zeros1(tmpca5);
         [tmpadjc1] = ret_circshift_ad(a_tmpca6);
         tmpca6 = adimat_pop1;
         a_y = adimat_adjsum(a_y, tmpadjc1);
         a_tmpca6 = a_zeros1(tmpca6);
      end
      j = adimat_pop1;
   end
   [k tmpfra1_2] = adimat_pop;
   for k=fliplr(0 : tmpfra1_2)
      M2 = adimat_pop_index1(M2, tmpda1);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M2(tmpda1))));
      a_M2 = a_zeros_index1(a_M2, M2, tmpda1);
      tmplia1 = adimat_pop1;
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmplia1, tmpca2));
      a_tmplia1 = a_zeros1(tmplia1);
      [tmpda1 tmpca2] = adimat_pop;
      a_y = adimat_adjsum(a_y, adimat_adjred(y, a_tmpca2 .* tmpca3));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, y .* a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      [tmpadjc1] = ret_circshift_ad(a_tmpca3);
      tmpca3 = adimat_pop1;
      a_y = adimat_adjsum(a_y, tmpadjc1);
      a_tmpca3 = a_zeros1(tmpca3);
   end
   a_y = adimat_adjsum(a_y, a_sum(a_M1, y));
end

function [M1 M2 M3] = rec_moments_from_data_no_debias(y, W)
   tmpca2 = 0;
   tmpca3 = 0;
   tmpca4 = 0;
   tmpca5 = 0;
   tmpca6 = 0;
   tmpda1 = 0;
   tmpda2 = 0;
   tmplia1 = 0;
   j = 0;
   M1 = sum(y);
   M2 = zeros(W, 1);
   tmpfra1_2 = W - 1;
   for k=0 : tmpfra1_2
      adimat_push1(tmpca3);
      tmpca3 = rec_circshift_ad(y, k);
      adimat_push1(tmpca2);
      tmpca2 = y .* tmpca3;
      adimat_push1(tmpda1);
      tmpda1 = k + 1;
      adimat_push1(tmplia1);
      tmplia1 = sum(tmpca2);
      adimat_push_index1(M2, tmpda1);
      M2(tmpda1) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   M3 = zeros(W, W);
   tmpfra1_2 = W - 1;
   adimat_push1(k);
   for k=0 : tmpfra1_2
      tmpfra2_2 = W - 1;
      adimat_push1(j);
      for j=0 : tmpfra2_2
         adimat_push1(tmpca6);
         tmpca6 = rec_circshift_ad(y, j);
         adimat_push1(tmpca5);
         tmpca5 = rec_circshift_ad(y, k);
         adimat_push1(tmpca4);
         tmpca4 = y .* tmpca5;
         adimat_push1(tmpca3);
         tmpca3 = tmpca4 .* tmpca6;
         adimat_push1(tmpda2);
         tmpda2 = j + 1;
         adimat_push1(tmpda1);
         tmpda1 = k + 1;
         adimat_push1(tmplia1);
         tmplia1 = sum(tmpca3);
         adimat_push_index2(M3, tmpda1, tmpda2);
         M3(tmpda1, tmpda2) = tmplia1;
      end
      adimat_push1(tmpfra2_2);
   end
   adimat_push(tmpfra1_2, k, j, tmpca2, tmpca3, tmpca4, tmpca5, tmpca6, tmpda1, tmpda2, tmplia1, M1, M2, M3, y);
   if nargin > 1
      adimat_push1(W);
   end
   adimat_push1(nargin);
end

function a_y = ret_moments_from_data_no_debias(a_M1, a_M2, a_M3)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      W = adimat_pop1;
   end
   [y M3 M2 M1 tmplia1 tmpda2 tmpda1 tmpca6 tmpca5 tmpca4 tmpca3 tmpca2 j k] = adimat_pop;
   [a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_tmpca6 a_tmplia1 a_y] = a_zeros(tmpca2, tmpca3, tmpca4, tmpca5, tmpca6, tmplia1, y);
   if nargin < 1
      a_M1 = a_zeros1(M1);
   end
   if nargin < 2
      a_M2 = a_zeros1(M2);
   end
   if nargin < 3
      a_M3 = a_zeros1(M3);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(0 : tmpfra1_2)
      tmpfra2_2 = adimat_pop1;
      for j=fliplr(0 : tmpfra2_2)
         M3 = adimat_pop_index2(M3, tmpda1, tmpda2);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M3(tmpda1, tmpda2))));
         a_M3 = a_zeros_index2(a_M3, M3, tmpda1, tmpda2);
         tmplia1 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmplia1, tmpca3));
         a_tmplia1 = a_zeros1(tmplia1);
         [tmpda1 tmpda2 tmpca3] = adimat_pop;
         a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, a_tmpca3 .* tmpca6));
         a_tmpca6 = adimat_adjsum(a_tmpca6, adimat_adjred(tmpca6, tmpca4 .* a_tmpca3));
         a_tmpca3 = a_zeros1(tmpca3);
         tmpca4 = adimat_pop1;
         a_y = adimat_adjsum(a_y, adimat_adjred(y, a_tmpca4 .* tmpca5));
         a_tmpca5 = adimat_adjsum(a_tmpca5, adimat_adjred(tmpca5, y .* a_tmpca4));
         a_tmpca4 = a_zeros1(tmpca4);
         [tmpadjc1] = ret_circshift_ad(a_tmpca5);
         tmpca5 = adimat_pop1;
         a_y = adimat_adjsum(a_y, tmpadjc1);
         a_tmpca5 = a_zeros1(tmpca5);
         [tmpadjc1] = ret_circshift_ad(a_tmpca6);
         tmpca6 = adimat_pop1;
         a_y = adimat_adjsum(a_y, tmpadjc1);
         a_tmpca6 = a_zeros1(tmpca6);
      end
      j = adimat_pop1;
   end
   [k tmpfra1_2] = adimat_pop;
   for k=fliplr(0 : tmpfra1_2)
      M2 = adimat_pop_index1(M2, tmpda1);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M2(tmpda1))));
      a_M2 = a_zeros_index1(a_M2, M2, tmpda1);
      tmplia1 = adimat_pop1;
      a_tmpca2 = adimat_adjsum(a_tmpca2, a_sum(a_tmplia1, tmpca2));
      a_tmplia1 = a_zeros1(tmplia1);
      [tmpda1 tmpca2] = adimat_pop;
      a_y = adimat_adjsum(a_y, adimat_adjred(y, a_tmpca2 .* tmpca3));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, y .* a_tmpca2));
      a_tmpca2 = a_zeros1(tmpca2);
      [tmpadjc1] = ret_circshift_ad(a_tmpca3);
      tmpca3 = adimat_pop1;
      a_y = adimat_adjsum(a_y, tmpadjc1);
      a_tmpca3 = a_zeros1(tmpca3);
   end
   a_y = adimat_adjsum(a_y, a_sum(a_M1, y));
end

function [a_x nr_x] = a_circshift_ad(x, k, a_x)
% Quick implementation of circshift for vectors, because Matlab's circshift
% is not recognized by ADiMat (for automatic differentiation in Manopt.)
   n = length(x);
   adimat_push1(k);
   k = mod(k, n);
   tmpda1 = k - 1;
   adimat_push1(x);
   x = x([end-tmpda1 : end 1 : end-k]);
   nr_x = x;
   if nargin < 3
      a_x = a_zeros1(x);
   end
   x = adimat_pop1;
   tmpsa1 = a_x;
   a_x = a_zeros1(x);
   a_x([end-tmpda1 : end 1 : end-k]) = adimat_adjsum(a_x([end-tmpda1 : end 1 : end-k]), tmpsa1);
   k = adimat_pop1;
end

function x = rec_circshift_ad(x, k)
   n = length(x);
   adimat_push1(k);
   k = mod(k, n);
   tmpda1 = k - 1;
   adimat_push1(x);
   x = x([end-tmpda1 : end 1 : end-k]);
   adimat_push(n, tmpda1, x, x);
   if nargin > 1
      adimat_push1(k);
   end
   adimat_push1(nargin);
end

function a_x = ret_circshift_ad(a_x)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      k = adimat_pop1;
   end
   [x x tmpda1 n] = adimat_pop;
   if nargin < 1
      a_x = a_zeros1(x);
   end
   x = adimat_pop1;
   tmpsa1 = a_x;
   a_x = a_zeros1(x);
   a_x([end-tmpda1 : end 1 : end-k]) = adimat_adjsum(a_x([end-tmpda1 : end 1 : end-k]), tmpsa1);
   k = adimat_pop1;
end
