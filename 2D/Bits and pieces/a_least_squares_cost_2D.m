% Generated by  0.6.2-5215
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=f
%  - independents=X
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_least_squares_cost_2D, rec_least_squares_cost_2D,
%  ret_least_squares_cost_2D, a_moments_from_signal_with_bias_2D, rec_moments_from_signal_with_bias_2D,
%  ret_moments_from_signal_with_bias_2D, a_moments_from_data_no_debias_2D, rec_moments_from_data_no_debias_2D,
%  ret_moments_from_data_no_debias_2D, a_circshift_ad_2D, rec_circshift_ad_2D,
%  ret_circshift_ad_2D, a_circshift_ad, rec_circshift_ad,
%  ret_circshift_ad
%

function [a_X nr_f] = a_least_squares_cost_2D(X, params, a_f)
   N = params.N;
   m = params.m;
   W = params.W;
   M1 = params.M1;
   M2 = params.M2;
   M3 = params.M3;
   sigma = params.sigma;
   list2 = params.list2;
   list3 = params.list3;
   [M1x M2x M3x] = rec_moments_from_signal_with_bias_2D(X, W, N, m, sigma, list2, list3);
   w1 = 1;
   w2 = 1 / W^2;
   w3 = 1 / W^4;
   tmpca2 = M1 - M1x;
   tmpca1 = tmpca2 ^ 2;
   f = w1 * tmpca1;
   tmpca4 = M2 - M2x;
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w2 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   adimat_push1(tmpca4);
   tmpca4 = M3 - M3x;
   adimat_push1(tmpca3);
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w3 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   adimat_push1(f);
   f = f / m;
   nr_f = f;
   [a_M1x a_M2x a_M3x a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_X] = a_zeros(M1x, M2x, M3x, tmpca1, tmpca2, tmpca3, tmpca4, X);
   if nargin < 3
      a_f = a_zeros1(f);
   end
   f = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(f, m, a_f);
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, tmpadjc1);
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w3, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_M3x = adimat_adjsum(a_M3x, adimat_adjred(M3x, -a_tmpca4));
   a_tmpca4 = a_zeros1(tmpca4);
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_M2x = adimat_adjsum(a_M2x, adimat_adjred(M2x, -a_tmpca4));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w1, a_f));
   [tmpadjc1] = adimat_a_mpowerl(tmpca2, 2, a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc1);
   a_M1x = adimat_adjsum(a_M1x, adimat_adjred(M1x, -a_tmpca2));
   [tmpadjc1] = ret_moments_from_signal_with_bias_2D(a_M1x, a_M2x, a_M3x);
   a_X = adimat_adjsum(a_X, tmpadjc1);
end

function f = rec_least_squares_cost_2D(X, params)
   N = params.N;
   m = params.m;
   W = params.W;
   M1 = params.M1;
   M2 = params.M2;
   M3 = params.M3;
   sigma = params.sigma;
   list2 = params.list2;
   list3 = params.list3;
   [M1x M2x M3x] = rec_moments_from_signal_with_bias_2D(X, W, N, m, sigma, list2, list3);
   w1 = 1;
   w2 = 1 / W^2;
   w3 = 1 / W^4;
   tmpca2 = M1 - M1x;
   tmpca1 = tmpca2 ^ 2;
   f = w1 * tmpca1;
   tmpca4 = M2 - M2x;
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w2 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   adimat_push1(tmpca4);
   tmpca4 = M3 - M3x;
   adimat_push1(tmpca3);
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w3 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   adimat_push1(f);
   f = f / m;
   adimat_push(N, m, W, M1, M2, M3, sigma, list2, list3, M1x, M2x, M3x, w1, w2, w3, tmpca1, tmpca2, tmpca3, tmpca4, f, X);
   if nargin > 1
      adimat_push1(params);
   end
   adimat_push1(nargin);
end

function a_X = ret_least_squares_cost_2D(a_f)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      params = adimat_pop1;
   end
   [X f tmpca4 tmpca3 tmpca2 tmpca1 w3 w2 w1 M3x M2x M1x list3 list2 sigma M3 M2 M1 W m N] = adimat_pop;
   [a_M1x a_M2x a_M3x a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_X] = a_zeros(M1x, M2x, M3x, tmpca1, tmpca2, tmpca3, tmpca4, X);
   if nargin < 1
      a_f = a_zeros1(f);
   end
   f = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(f, m, a_f);
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, tmpadjc1);
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w3, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_M3x = adimat_adjsum(a_M3x, adimat_adjred(M3x, -a_tmpca4));
   a_tmpca4 = a_zeros1(tmpca4);
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_M2x = adimat_adjsum(a_M2x, adimat_adjred(M2x, -a_tmpca4));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w1, a_f));
   [tmpadjc1] = adimat_a_mpowerl(tmpca2, 2, a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc1);
   a_M1x = adimat_adjsum(a_M1x, adimat_adjred(M1x, -a_tmpca2));
   [tmpadjc1] = ret_moments_from_signal_with_bias_2D(a_M1x, a_M2x, a_M3x);
   a_X = adimat_adjsum(a_X, tmpadjc1);
end

function [a_X nr_M1 nr_M2 nr_M3] = a_moments_from_signal_with_bias_2D(X, W, N, m, sigma, list2, list3, a_M1, a_M2, a_M3)
% Inputs:
%   X is an image of size LxL
%   W is the maximum shift used in computing correlations
%   N is the size of an observed image (NxN)
%   m is the number of times X is supposed to appear in an observation
%   sigma is the noise standard deviation (iid standard Gaussian, white noise)
% Zero-pad X
   tmplia1 = 0;
   L = size(X, 1);
   assert(size(X, 2) == L, 'X must be square.');
   tmpda4 = L + W;
   tmpda3 = zeros(W, tmpda4);
   tmpda2 = zeros(L, W);
   tmpca1 = [X tmpda2];
   X_zp = [tmpca1
         tmpda3];
   [M1 M2 M3] = rec_moments_from_data_no_debias_2D(X_zp, list2, list3);
   adimat_push1(M1);
   M1 = M1 * m;
   adimat_push1(M2);
   M2 = M2 * m;
   bias2 = zeros(size(M2));
   tmpfra1_2 = size(M2, 1);
   for k=1 : tmpfra1_2
      tmpba1 = 0;
      if list2(k, 1)==0 && list2(k, 2)==0
         tmpba1 = 1;
         adimat_push_index1(bias2, k);
         bias2(k) = N^2 * sigma^2;
      end
      adimat_push1(tmpba1);
   end
   adimat_push(tmpfra1_2, M2);
   M2 = M2 + bias2;
   adimat_push1(M3);
   M3 = M3 * m;
   tmpda1 = size(M3);
   bias3 = zeros(tmpda1);
   tmpfra1_2 = size(M3, 1);
   adimat_push1(k);
   for k=1 : tmpfra1_2
      tmpba1 = 0;
      if list3(k, 1)==0 && list3(k, 2)==0
         tmpba1 = 1;
         adimat_push1(tmpda2);
         tmpda2 = sigma ^ 2;
         adimat_push1(tmpca1);
         tmpca1 = M1 * tmpda2;
         adimat_push1(tmplia1);
         tmplia1 = bias3(k) + tmpca1;
         adimat_push_index1(bias3, k);
         bias3(k) = tmplia1;
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if list3(k, 3)==0 && list3(k, 4)==0
         tmpba1 = 1;
         adimat_push1(tmpda2);
         tmpda2 = sigma ^ 2;
         adimat_push1(tmpca1);
         tmpca1 = M1 * tmpda2;
         adimat_push1(tmplia1);
         tmplia1 = bias3(k) + tmpca1;
         adimat_push_index1(bias3, k);
         bias3(k) = tmplia1;
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if list3(k, 1)==list3(k, 3) && list3(k, 2)==list3(k, 4)
         tmpba1 = 1;
         adimat_push1(tmpda2);
         tmpda2 = sigma ^ 2;
         adimat_push1(tmpca1);
         tmpca1 = M1 * tmpda2;
         adimat_push1(tmplia1);
         tmplia1 = bias3(k) + tmpca1;
         adimat_push_index1(bias3, k);
         bias3(k) = tmplia1;
      end
      adimat_push1(tmpba1);
   end
   adimat_push(tmpfra1_2, M3);
   M3 = M3 + bias3;
   nr_M1 = M1;
   nr_M2 = M2;
   nr_M3 = M3;
   [a_X_zp a_bias3 a_tmpca1 a_tmplia1 a_X] = a_zeros(X_zp, bias3, tmpca1, tmplia1, X);
   if nargin < 8
      a_M1 = a_zeros1(M1);
   end
   if nargin < 9
      a_M2 = a_zeros1(M2);
   end
   if nargin < 10
      a_M3 = a_zeros1(M3);
   end
   M3 = adimat_pop1;
   a_bias3 = adimat_adjsum(a_bias3, adimat_adjred(bias3, a_M3));
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjred(M3, tmpsa1));
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias3 = adimat_pop_index1(bias3, k);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_bias3(k))));
         a_bias3 = a_zeros_index1(a_bias3, bias3, k);
         tmplia1 = adimat_pop1;
         a_bias3(k) = adimat_adjsum(a_bias3(k), adimat_adjred(bias3(k), a_tmplia1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         tmpca1 = adimat_pop1;
         a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca1, tmpda2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpda2 = adimat_pop1;
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias3 = adimat_pop_index1(bias3, k);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_bias3(k))));
         a_bias3 = a_zeros_index1(a_bias3, bias3, k);
         tmplia1 = adimat_pop1;
         a_bias3(k) = adimat_adjsum(a_bias3(k), adimat_adjred(bias3(k), a_tmplia1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         tmpca1 = adimat_pop1;
         a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca1, tmpda2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpda2 = adimat_pop1;
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias3 = adimat_pop_index1(bias3, k);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_bias3(k))));
         a_bias3 = a_zeros_index1(a_bias3, bias3, k);
         tmplia1 = adimat_pop1;
         a_bias3(k) = adimat_adjsum(a_bias3(k), adimat_adjred(bias3(k), a_tmplia1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         tmpca1 = adimat_pop1;
         a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca1, tmpda2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpda2 = adimat_pop1;
      end
   end
   [k M3] = adimat_pop;
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjmultl(M3, tmpsa1, m));
   M2 = adimat_pop1;
   tmpsa1 = a_M2;
   a_M2 = a_zeros1(M2);
   a_M2 = adimat_adjsum(a_M2, adimat_adjred(M2, tmpsa1));
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias2 = adimat_pop_index1(bias2, k);
      end
   end
   M2 = adimat_pop1;
   tmpsa1 = a_M2;
   a_M2 = a_zeros1(M2);
   a_M2 = adimat_adjsum(a_M2, adimat_adjmultl(M2, tmpsa1, m));
   M1 = adimat_pop1;
   tmpsa1 = a_M1;
   a_M1 = a_zeros1(M1);
   a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, tmpsa1, m));
   [tmpadjc1] = ret_moments_from_data_no_debias_2D(a_M1, a_M2, a_M3);
   a_X_zp = adimat_adjsum(a_X_zp, tmpadjc1);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_X_zp, tmpca1));
   a_X = adimat_adjsum(a_X, a_horzcat(a_tmpca1, X));
   assert(size(X, 2) == L, 'X must be square.');
end

function [M1 M2 M3] = rec_moments_from_signal_with_bias_2D(X, W, N, m, sigma, list2, list3)
   tmplia1 = 0;
   L = size(X, 1);
   assert(size(X, 2) == L, 'X must be square.');
   tmpda4 = L + W;
   tmpda3 = zeros(W, tmpda4);
   tmpda2 = zeros(L, W);
   tmpca1 = [X tmpda2];
   X_zp = [tmpca1
         tmpda3];
   [M1 M2 M3] = rec_moments_from_data_no_debias_2D(X_zp, list2, list3);
   adimat_push1(M1);
   M1 = M1 * m;
   adimat_push1(M2);
   M2 = M2 * m;
   bias2 = zeros(size(M2));
   tmpfra1_2 = size(M2, 1);
   for k=1 : tmpfra1_2
      tmpba1 = 0;
      if list2(k, 1)==0 && list2(k, 2)==0
         tmpba1 = 1;
         adimat_push_index1(bias2, k);
         bias2(k) = N^2 * sigma^2;
      end
      adimat_push1(tmpba1);
   end
   adimat_push(tmpfra1_2, M2);
   M2 = M2 + bias2;
   adimat_push1(M3);
   M3 = M3 * m;
   tmpda1 = size(M3);
   bias3 = zeros(tmpda1);
   tmpfra1_2 = size(M3, 1);
   adimat_push1(k);
   for k=1 : tmpfra1_2
      tmpba1 = 0;
      if list3(k, 1)==0 && list3(k, 2)==0
         tmpba1 = 1;
         adimat_push1(tmpda2);
         tmpda2 = sigma ^ 2;
         adimat_push1(tmpca1);
         tmpca1 = M1 * tmpda2;
         adimat_push1(tmplia1);
         tmplia1 = bias3(k) + tmpca1;
         adimat_push_index1(bias3, k);
         bias3(k) = tmplia1;
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if list3(k, 3)==0 && list3(k, 4)==0
         tmpba1 = 1;
         adimat_push1(tmpda2);
         tmpda2 = sigma ^ 2;
         adimat_push1(tmpca1);
         tmpca1 = M1 * tmpda2;
         adimat_push1(tmplia1);
         tmplia1 = bias3(k) + tmpca1;
         adimat_push_index1(bias3, k);
         bias3(k) = tmplia1;
      end
      adimat_push1(tmpba1);
      tmpba1 = 0;
      if list3(k, 1)==list3(k, 3) && list3(k, 2)==list3(k, 4)
         tmpba1 = 1;
         adimat_push1(tmpda2);
         tmpda2 = sigma ^ 2;
         adimat_push1(tmpca1);
         tmpca1 = M1 * tmpda2;
         adimat_push1(tmplia1);
         tmplia1 = bias3(k) + tmpca1;
         adimat_push_index1(bias3, k);
         bias3(k) = tmplia1;
      end
      adimat_push1(tmpba1);
   end
   adimat_push(tmpfra1_2, M3);
   M3 = M3 + bias3;
   adimat_push(L, X_zp, bias2, k, bias3, tmpca1, tmpda1, tmpda2, tmpda3, tmpda4, tmplia1, M1, M2, M3, X);
   if nargin > 1
      adimat_push1(W);
   end
   if nargin > 2
      adimat_push1(N);
   end
   if nargin > 3
      adimat_push1(m);
   end
   if nargin > 4
      adimat_push1(sigma);
   end
   if nargin > 5
      adimat_push1(list2);
   end
   if nargin > 6
      adimat_push1(list3);
   end
   adimat_push1(nargin);
end

function a_X = ret_moments_from_signal_with_bias_2D(a_M1, a_M2, a_M3)
   tmpnargin = adimat_pop1;
   if tmpnargin > 6
      list3 = adimat_pop1;
   end
   if tmpnargin > 5
      list2 = adimat_pop1;
   end
   if tmpnargin > 4
      sigma = adimat_pop1;
   end
   if tmpnargin > 3
      m = adimat_pop1;
   end
   if tmpnargin > 2
      N = adimat_pop1;
   end
   if tmpnargin > 1
      W = adimat_pop1;
   end
   [X M3 M2 M1 tmplia1 tmpda4 tmpda3 tmpda2 tmpda1 tmpca1 bias3 k bias2 X_zp L] = adimat_pop;
   [a_X_zp a_bias3 a_tmpca1 a_tmplia1 a_X] = a_zeros(X_zp, bias3, tmpca1, tmplia1, X);
   if nargin < 1
      a_M1 = a_zeros1(M1);
   end
   if nargin < 2
      a_M2 = a_zeros1(M2);
   end
   if nargin < 3
      a_M3 = a_zeros1(M3);
   end
   M3 = adimat_pop1;
   a_bias3 = adimat_adjsum(a_bias3, adimat_adjred(bias3, a_M3));
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjred(M3, tmpsa1));
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias3 = adimat_pop_index1(bias3, k);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_bias3(k))));
         a_bias3 = a_zeros_index1(a_bias3, bias3, k);
         tmplia1 = adimat_pop1;
         a_bias3(k) = adimat_adjsum(a_bias3(k), adimat_adjred(bias3(k), a_tmplia1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         tmpca1 = adimat_pop1;
         a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca1, tmpda2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpda2 = adimat_pop1;
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias3 = adimat_pop_index1(bias3, k);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_bias3(k))));
         a_bias3 = a_zeros_index1(a_bias3, bias3, k);
         tmplia1 = adimat_pop1;
         a_bias3(k) = adimat_adjsum(a_bias3(k), adimat_adjred(bias3(k), a_tmplia1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         tmpca1 = adimat_pop1;
         a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca1, tmpda2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpda2 = adimat_pop1;
      end
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias3 = adimat_pop_index1(bias3, k);
         a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_bias3(k))));
         a_bias3 = a_zeros_index1(a_bias3, bias3, k);
         tmplia1 = adimat_pop1;
         a_bias3(k) = adimat_adjsum(a_bias3(k), adimat_adjred(bias3(k), a_tmplia1));
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1));
         a_tmplia1 = a_zeros1(tmplia1);
         tmpca1 = adimat_pop1;
         a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, a_tmpca1, tmpda2));
         a_tmpca1 = a_zeros1(tmpca1);
         tmpda2 = adimat_pop1;
      end
   end
   [k M3] = adimat_pop;
   tmpsa1 = a_M3;
   a_M3 = a_zeros1(M3);
   a_M3 = adimat_adjsum(a_M3, adimat_adjmultl(M3, tmpsa1, m));
   M2 = adimat_pop1;
   tmpsa1 = a_M2;
   a_M2 = a_zeros1(M2);
   a_M2 = adimat_adjsum(a_M2, adimat_adjred(M2, tmpsa1));
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpba1 = adimat_pop1;
      if tmpba1 == 1
         bias2 = adimat_pop_index1(bias2, k);
      end
   end
   M2 = adimat_pop1;
   tmpsa1 = a_M2;
   a_M2 = a_zeros1(M2);
   a_M2 = adimat_adjsum(a_M2, adimat_adjmultl(M2, tmpsa1, m));
   M1 = adimat_pop1;
   tmpsa1 = a_M1;
   a_M1 = a_zeros1(M1);
   a_M1 = adimat_adjsum(a_M1, adimat_adjmultl(M1, tmpsa1, m));
   [tmpadjc1] = ret_moments_from_data_no_debias_2D(a_M1, a_M2, a_M3);
   a_X_zp = adimat_adjsum(a_X_zp, tmpadjc1);
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_vertcat(a_X_zp, tmpca1));
   a_X = adimat_adjsum(a_X, a_horzcat(a_tmpca1, X));
   assert(size(X, 2) == L, 'X must be square.');
end

function [a_Y nr_M1 nr_M2 nr_M3] = a_moments_from_data_no_debias_2D(Y, list2, list3, a_M1, a_M2, a_M3)
% Y is an image (a matrix)
% list2 has size n2 x 2
% list3 has size n3 x 4
% Each row of list2 and list3 contains integers (shifts)
% Initializations for AD
   tmpca1 = 0;
   tmpca3 = 0;
   tmpda2 = 0;
   tmpda4 = 0;
   tmplia1 = 0;
   k1 = 0;
   k2 = 0;
   l1 = 0;
   l2 = 0;
   tmpda1 = size(Y);
   shiftedY = zeros(tmpda1);
   adimat_push1(tmpda1);
   tmpda1 = size(Y);
   shiftedYY = zeros(tmpda1);
   M1 = sum(Y(:));
   n2 = size(list2, 1);
   M2 = zeros(n2, 1);
   tmpfra1_2 = n2;
   for k=1 : tmpfra1_2
      adimat_push1(k1);
      k1 = list2(k, 1);
      adimat_push1(k2);
      k2 = list2(k, 2);
      adimat_push1(tmpda1);
      tmpda1 = [k1 k2];
      adimat_push1(shiftedY);
      shiftedY = rec_circshift_ad_2D(Y, tmpda1);
      adimat_push1(tmplia1);
      tmplia1 = Y(:)' * shiftedY(:);
      adimat_push_index1(M2, k);
      M2(k) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   n3 = size(list3, 1);
   M3 = zeros(n3, 1);
   tmpfra1_2 = n3;
   adimat_push1(k);
   for k=1 : tmpfra1_2
      adimat_push1(k1);
      k1 = list3(k, 1);
      adimat_push1(k2);
      k2 = list3(k, 2);
      adimat_push1(l1);
      l1 = list3(k, 3);
      adimat_push1(l2);
      l2 = list3(k, 4);
      adimat_push1(tmpda4);
      tmpda4 = [l1 l2];
      adimat_push1(tmpca3);
      tmpca3 = rec_circshift_ad_2D(Y, tmpda4);
      adimat_push1(tmpda2);
      tmpda2 = [k1 k2];
      adimat_push1(tmpca1);
      tmpca1 = rec_circshift_ad_2D(Y, tmpda2);
      adimat_push1(shiftedYY);
      shiftedYY = tmpca1 .* tmpca3;
      adimat_push1(tmplia1);
      tmplia1 = Y(:)' * shiftedYY(:);
      adimat_push_index1(M3, k);
      M3(k) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   nr_M1 = M1;
   nr_M2 = M2;
   nr_M3 = M3;
   [a_shiftedY a_shiftedYY a_tmpca1 a_tmpca3 a_tmplia1 a_Y] = a_zeros(shiftedY, shiftedYY, tmpca1, tmpca3, tmplia1, Y);
   if nargin < 4
      a_M1 = a_zeros1(M1);
   end
   if nargin < 5
      a_M2 = a_zeros1(M2);
   end
   if nargin < 6
      a_M3 = a_zeros1(M3);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      M3 = adimat_pop_index1(M3, k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M3(k))));
      a_M3 = a_zeros_index1(a_M3, M3, k);
      tmplia1 = adimat_pop1;
      a_Y(:) = adimat_adjsum(a_Y(:), a_ctranspose(adimat_adjmultl(Y(:)', a_tmplia1, shiftedYY(:)), Y(:)));
      a_shiftedYY(:) = adimat_adjsum(a_shiftedYY(:), adimat_adjmultr(shiftedYY(:), Y(:)', a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      shiftedYY = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_shiftedYY .* tmpca3));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, tmpca1 .* a_shiftedYY));
      a_shiftedYY = a_zeros1(shiftedYY);
      [tmpadjc1] = ret_circshift_ad_2D(a_tmpca1);
      tmpca1 = adimat_pop1;
      a_Y = adimat_adjsum(a_Y, tmpadjc1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpda2 = adimat_pop1;
      [tmpadjc1] = ret_circshift_ad_2D(a_tmpca3);
      tmpca3 = adimat_pop1;
      a_Y = adimat_adjsum(a_Y, tmpadjc1);
      a_tmpca3 = a_zeros1(tmpca3);
      [tmpda4 l2 l1 k2 k1] = adimat_pop;
   end
   [k tmpfra1_2] = adimat_pop;
   for k=fliplr(1 : tmpfra1_2)
      M2 = adimat_pop_index1(M2, k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M2(k))));
      a_M2 = a_zeros_index1(a_M2, M2, k);
      tmplia1 = adimat_pop1;
      a_Y(:) = adimat_adjsum(a_Y(:), a_ctranspose(adimat_adjmultl(Y(:)', a_tmplia1, shiftedY(:)), Y(:)));
      a_shiftedY(:) = adimat_adjsum(a_shiftedY(:), adimat_adjmultr(shiftedY(:), Y(:)', a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      [tmpadjc1] = ret_circshift_ad_2D(a_shiftedY);
      shiftedY = adimat_pop1;
      a_Y = adimat_adjsum(a_Y, tmpadjc1);
      a_shiftedY = a_zeros1(shiftedY);
      [tmpda1 k2 k1] = adimat_pop;
   end
   a_Y(:) = adimat_adjsum(a_Y(:), a_sum(a_M1, Y(:)));
   tmpda1 = adimat_pop1;
end

function [M1 M2 M3] = rec_moments_from_data_no_debias_2D(Y, list2, list3)
   tmpca1 = 0;
   tmpca3 = 0;
   tmpda2 = 0;
   tmpda4 = 0;
   tmplia1 = 0;
   k1 = 0;
   k2 = 0;
   l1 = 0;
   l2 = 0;
   tmpda1 = size(Y);
   shiftedY = zeros(tmpda1);
   adimat_push1(tmpda1);
   tmpda1 = size(Y);
   shiftedYY = zeros(tmpda1);
   M1 = sum(Y(:));
   n2 = size(list2, 1);
   M2 = zeros(n2, 1);
   tmpfra1_2 = n2;
   for k=1 : tmpfra1_2
      adimat_push1(k1);
      k1 = list2(k, 1);
      adimat_push1(k2);
      k2 = list2(k, 2);
      adimat_push1(tmpda1);
      tmpda1 = [k1 k2];
      adimat_push1(shiftedY);
      shiftedY = rec_circshift_ad_2D(Y, tmpda1);
      adimat_push1(tmplia1);
      tmplia1 = Y(:)' * shiftedY(:);
      adimat_push_index1(M2, k);
      M2(k) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   n3 = size(list3, 1);
   M3 = zeros(n3, 1);
   tmpfra1_2 = n3;
   adimat_push1(k);
   for k=1 : tmpfra1_2
      adimat_push1(k1);
      k1 = list3(k, 1);
      adimat_push1(k2);
      k2 = list3(k, 2);
      adimat_push1(l1);
      l1 = list3(k, 3);
      adimat_push1(l2);
      l2 = list3(k, 4);
      adimat_push1(tmpda4);
      tmpda4 = [l1 l2];
      adimat_push1(tmpca3);
      tmpca3 = rec_circshift_ad_2D(Y, tmpda4);
      adimat_push1(tmpda2);
      tmpda2 = [k1 k2];
      adimat_push1(tmpca1);
      tmpca1 = rec_circshift_ad_2D(Y, tmpda2);
      adimat_push1(shiftedYY);
      shiftedYY = tmpca1 .* tmpca3;
      adimat_push1(tmplia1);
      tmplia1 = Y(:)' * shiftedYY(:);
      adimat_push_index1(M3, k);
      M3(k) = tmplia1;
   end
   adimat_push(tmpfra1_2, k1, k2, l1, l2, shiftedY, shiftedYY, n2, k, n3, tmpca1, tmpca3, tmpda1, tmpda2, tmpda4, tmplia1, M1, M2, M3, Y);
   if nargin > 1
      adimat_push1(list2);
   end
   if nargin > 2
      adimat_push1(list3);
   end
   adimat_push1(nargin);
end

function a_Y = ret_moments_from_data_no_debias_2D(a_M1, a_M2, a_M3)
   tmpnargin = adimat_pop1;
   if tmpnargin > 2
      list3 = adimat_pop1;
   end
   if tmpnargin > 1
      list2 = adimat_pop1;
   end
   [Y M3 M2 M1 tmplia1 tmpda4 tmpda2 tmpda1 tmpca3 tmpca1 n3 k n2 shiftedYY shiftedY l2 l1 k2 k1] = adimat_pop;
   [a_shiftedY a_shiftedYY a_tmpca1 a_tmpca3 a_tmplia1 a_Y] = a_zeros(shiftedY, shiftedYY, tmpca1, tmpca3, tmplia1, Y);
   if nargin < 1
      a_M1 = a_zeros1(M1);
   end
   if nargin < 2
      a_M2 = a_zeros1(M2);
   end
   if nargin < 3
      a_M3 = a_zeros1(M3);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      M3 = adimat_pop_index1(M3, k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M3(k))));
      a_M3 = a_zeros_index1(a_M3, M3, k);
      tmplia1 = adimat_pop1;
      a_Y(:) = adimat_adjsum(a_Y(:), a_ctranspose(adimat_adjmultl(Y(:)', a_tmplia1, shiftedYY(:)), Y(:)));
      a_shiftedYY(:) = adimat_adjsum(a_shiftedYY(:), adimat_adjmultr(shiftedYY(:), Y(:)', a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      shiftedYY = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_shiftedYY .* tmpca3));
      a_tmpca3 = adimat_adjsum(a_tmpca3, adimat_adjred(tmpca3, tmpca1 .* a_shiftedYY));
      a_shiftedYY = a_zeros1(shiftedYY);
      [tmpadjc1] = ret_circshift_ad_2D(a_tmpca1);
      tmpca1 = adimat_pop1;
      a_Y = adimat_adjsum(a_Y, tmpadjc1);
      a_tmpca1 = a_zeros1(tmpca1);
      tmpda2 = adimat_pop1;
      [tmpadjc1] = ret_circshift_ad_2D(a_tmpca3);
      tmpca3 = adimat_pop1;
      a_Y = adimat_adjsum(a_Y, tmpadjc1);
      a_tmpca3 = a_zeros1(tmpca3);
      [tmpda4 l2 l1 k2 k1] = adimat_pop;
   end
   [k tmpfra1_2] = adimat_pop;
   for k=fliplr(1 : tmpfra1_2)
      M2 = adimat_pop_index1(M2, k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_M2(k))));
      a_M2 = a_zeros_index1(a_M2, M2, k);
      tmplia1 = adimat_pop1;
      a_Y(:) = adimat_adjsum(a_Y(:), a_ctranspose(adimat_adjmultl(Y(:)', a_tmplia1, shiftedY(:)), Y(:)));
      a_shiftedY(:) = adimat_adjsum(a_shiftedY(:), adimat_adjmultr(shiftedY(:), Y(:)', a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      [tmpadjc1] = ret_circshift_ad_2D(a_shiftedY);
      shiftedY = adimat_pop1;
      a_Y = adimat_adjsum(a_Y, tmpadjc1);
      a_shiftedY = a_zeros1(shiftedY);
      [tmpda1 k2 k1] = adimat_pop;
   end
   a_Y(:) = adimat_adjsum(a_Y(:), a_sum(a_M1, Y(:)));
   tmpda1 = adimat_pop1;
end

function [a_X nr_X] = a_circshift_ad_2D(X, k, a_X)
   tmpca2 = rec_circshift_ad(X, k(1));
   tmpca1 = rec_circshift_ad(tmpca2', k(2));
   adimat_push1(X);
   X = tmpca1';
   nr_X = X;
   [a_tmpca1 a_tmpca2] = a_zeros(tmpca1, tmpca2);
   if nargin < 3
      a_X = a_zeros1(X);
   end
   X = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_ctranspose(a_X, tmpca1));
   a_X = a_zeros1(X);
   [tmpadjc1] = ret_circshift_ad(a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_ctranspose(tmpadjc1, tmpca2));
   [tmpadjc1] = ret_circshift_ad(a_tmpca2);
   a_X = adimat_adjsum(a_X, tmpadjc1);
end

function X = rec_circshift_ad_2D(X, k)
   tmpca2 = rec_circshift_ad(X, k(1));
   tmpca1 = rec_circshift_ad(tmpca2', k(2));
   adimat_push1(X);
   X = tmpca1';
   adimat_push(tmpca1, tmpca2, X, X);
   if nargin > 1
      adimat_push1(k);
   end
   adimat_push1(nargin);
end

function a_X = ret_circshift_ad_2D(a_X)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      k = adimat_pop1;
   end
   [X X tmpca2 tmpca1] = adimat_pop;
   [a_tmpca1 a_tmpca2] = a_zeros(tmpca1, tmpca2);
   if nargin < 1
      a_X = a_zeros1(X);
   end
   X = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, a_ctranspose(a_X, tmpca1));
   a_X = a_zeros1(X);
   [tmpadjc1] = ret_circshift_ad(a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, a_ctranspose(tmpadjc1, tmpca2));
   [tmpadjc1] = ret_circshift_ad(a_tmpca2);
   a_X = adimat_adjsum(a_X, tmpadjc1);
end

function [a_x nr_x] = a_circshift_ad(x, k, a_x)
% Quick implementation of circshift for vectors, because Matlab's circshift
% is not recognized by ADiMat (for automatic differentiation in Manopt.)
   n = size(x, 1);
   adimat_push1(k);
   k = mod(k, n);
   tmpda1 = k - 1;
   adimat_push1(x);
   x = x([end-tmpda1 : end 1 : end-k], :);
   nr_x = x;
   if nargin < 3
      a_x = a_zeros1(x);
   end
   x = adimat_pop1;
   tmpsa1 = a_x;
   a_x = a_zeros1(x);
   a_x([end-tmpda1 : end 1 : end-k], :) = adimat_adjsum(a_x([end-tmpda1 : end 1 : end-k], :), tmpsa1);
   k = adimat_pop1;
end

function x = rec_circshift_ad(x, k)
   n = size(x, 1);
   adimat_push1(k);
   k = mod(k, n);
   tmpda1 = k - 1;
   adimat_push1(x);
   x = x([end-tmpda1 : end 1 : end-k], :);
   adimat_push(n, tmpda1, x, x);
   if nargin > 1
      adimat_push1(k);
   end
   adimat_push1(nargin);
end

function a_x = ret_circshift_ad(a_x)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      k = adimat_pop1;
   end
   [x x tmpda1 n] = adimat_pop;
   if nargin < 1
      a_x = a_zeros1(x);
   end
   x = adimat_pop1;
   tmpsa1 = a_x;
   a_x = a_zeros1(x);
   a_x([end-tmpda1 : end 1 : end-k], :) = adimat_adjsum(a_x([end-tmpda1 : end 1 : end-k], :), tmpsa1);
   k = adimat_pop1;
end
