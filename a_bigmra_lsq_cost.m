% Generated by  0.6.2-5215
% © 2001-2008 Andre Vehreschild <vehreschild@sc.rwth-aachen.de>
% © 2009-2015 Johannes Willkomm <johannes@johannes-willkomm.de>
% TU Darmstadt, 64289 Darmstadt, Germany
% Visit us on the web at http://www.adimat.de/
% Report bugs to johannes@johannes-willkomm.de
%
%                             DISCLAIMER
% 
% ADiMat was prepared as part of an employment at the Institute for Scientific Computing,
% RWTH Aachen University, Germany and at the Institute for Scientific Computing,
% TU Darmstadt, Germany and is provided AS IS. 
% NEITHER THE AUTHOR(S), THE GOVERNMENT OF THE FEDERAL REPUBLIC OF GERMANY
% NOR ANY AGENCY THEREOF, NOR THE RWTH AACHEN UNIVERSITY, NOT THE TU DARMSTADT,
% INCLUDING ANY OF THEIR EMPLOYEES OR OFFICERS, MAKES ANY WARRANTY, EXPRESS OR IMPLIED,
% OR ASSUMES ANY LEGAL LIABILITY OR RESPONSIBILITY FOR THE ACCURACY, COMPLETENESS,
% OR USEFULNESS OF ANY INFORMATION OR PROCESS DISCLOSED, OR REPRESENTS THAT ITS USE
% WOULD NOT INFRINGE PRIVATELY OWNED RIGHTS.
%
% Parameters:
%  - dependents=f
%  - independents=x
%  - inputEncoding=ISO-8859-1
%
% Functions in this file: a_bigmra_lsq_cost, rec_bigmra_lsq_cost,
%  ret_bigmra_lsq_cost, a_mux, rec_mux,
%  ret_mux, a_psx, rec_psx,
%  ret_psx, a_bsx, rec_bsx,
%  ret_bsx, a_powerspectrum_from_signal, rec_powerspectrum_from_signal,
%  ret_powerspectrum_from_signal, a_bispectrum_from_signal, rec_bispectrum_from_signal,
%  ret_bispectrum_from_signal, a_circulant_AD, rec_circulant_AD,
%  ret_circulant_AD
%

function [a_x nr_f] = a_bigmra_lsq_cost(x, params, a_f)
   M1 = params.M1;
   M2 = params.M2;
   M3 = params.M3;
   sigma = params.sigma;
   N = params.N;
   m = params.m;
   W = params.W;
   M1_est = rec_mux(x, m, N);
   M2_est = rec_psx(x, m, N, W);
   M3_est = rec_bsx(x, m, N, W);
   tmpda2 = sigma ^ 2;
   tmpda1 = tmpda2 * W;
   adimat_push1(M2_est);
   M2_est = M2_est + tmpda1;
   A = eye(W);
   adimat_push_index2(A, ':', 1);
   A(:, 1) = A(:, 1) + 1;
   adimat_push_index2(A, 1, ':');
   A(1, :) = A(1, :) + 1;
   tmpda5 = W ^ 2;
   tmpda4 = sigma ^ 2;
   tmpda3 = tmpda4 * tmpda5;
   adimat_push1(tmpda2);
   tmpda2 = tmpda3 * M1;
   adimat_push1(tmpda1);
   tmpda1 = tmpda2 * A;
   adimat_push1(M3_est);
   M3_est = M3_est + tmpda1;
   w1 = 1;
   w2 = 1 / W;
   w3 = 1 / W^2;
   tmpca2 = M1 - M1_est;
   tmpca1 = tmpca2 ^ 2;
   f = w1 * tmpca1;
   tmpca4 = M2 - M2_est;
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w2 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   M3_diff = M3(:) - M3_est(:);
   adimat_push1(tmpca4);
   tmpca4 = conj(M3_diff);
   adimat_push1(tmpca3);
   tmpca3 = M3_diff .* tmpca4;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w3 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   nr_f = f;
   [a_M1_est a_M2_est a_M3_est a_M3_diff a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_x] = a_zeros(M1_est, M2_est, M3_est, M3_diff, tmpca1, tmpca2, tmpca3, tmpca4, x);
   if nargin < 3
      a_f = a_zeros1(f);
   end
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w3, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_M3_diff = adimat_adjsum(a_M3_diff, adimat_adjred(M3_diff, a_tmpca3 .* tmpca4));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, M3_diff .* a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_M3_diff = adimat_adjsum(a_M3_diff, call(@conj, a_tmpca4));
   a_tmpca4 = a_zeros1(tmpca4);
   a_M3_est(:) = adimat_adjsum(a_M3_est(:), adimat_adjred(M3_est(:), -a_M3_diff));
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_M2_est = adimat_adjsum(a_M2_est, adimat_adjred(M2_est, -a_tmpca4));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w1, a_f));
   [tmpadjc1] = adimat_a_mpowerl(tmpca2, 2, a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc1);
   a_M1_est = adimat_adjsum(a_M1_est, adimat_adjred(M1_est, -a_tmpca2));
   M3_est = adimat_pop1;
   tmpsa1 = a_M3_est;
   a_M3_est = a_zeros1(M3_est);
   a_M3_est = adimat_adjsum(a_M3_est, adimat_adjred(M3_est, tmpsa1));
   [tmpda1 tmpda2] = adimat_pop;
   A = adimat_pop_index2(A, 1, ':');
   A = adimat_pop_index2(A, ':', 1);
   M2_est = adimat_pop1;
   tmpsa1 = a_M2_est;
   a_M2_est = a_zeros1(M2_est);
   a_M2_est = adimat_adjsum(a_M2_est, adimat_adjred(M2_est, tmpsa1));
   [tmpadjc1] = ret_bsx(a_M3_est);
   a_x = adimat_adjsum(a_x, tmpadjc1);
   [tmpadjc1] = ret_psx(a_M2_est);
   a_x = adimat_adjsum(a_x, tmpadjc1);
   [tmpadjc1] = ret_mux(a_M1_est);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end

function f = rec_bigmra_lsq_cost(x, params)
   M1 = params.M1;
   M2 = params.M2;
   M3 = params.M3;
   sigma = params.sigma;
   N = params.N;
   m = params.m;
   W = params.W;
   M1_est = rec_mux(x, m, N);
   M2_est = rec_psx(x, m, N, W);
   M3_est = rec_bsx(x, m, N, W);
   tmpda2 = sigma ^ 2;
   tmpda1 = tmpda2 * W;
   adimat_push1(M2_est);
   M2_est = M2_est + tmpda1;
   A = eye(W);
   adimat_push_index2(A, ':', 1);
   A(:, 1) = A(:, 1) + 1;
   adimat_push_index2(A, 1, ':');
   A(1, :) = A(1, :) + 1;
   tmpda5 = W ^ 2;
   tmpda4 = sigma ^ 2;
   tmpda3 = tmpda4 * tmpda5;
   adimat_push1(tmpda2);
   tmpda2 = tmpda3 * M1;
   adimat_push1(tmpda1);
   tmpda1 = tmpda2 * A;
   adimat_push1(M3_est);
   M3_est = M3_est + tmpda1;
   w1 = 1;
   w2 = 1 / W;
   w3 = 1 / W^2;
   tmpca2 = M1 - M1_est;
   tmpca1 = tmpca2 ^ 2;
   f = w1 * tmpca1;
   tmpca4 = M2 - M2_est;
   tmpca3 = tmpca4 .^ 2;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w2 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   M3_diff = M3(:) - M3_est(:);
   adimat_push1(tmpca4);
   tmpca4 = conj(M3_diff);
   adimat_push1(tmpca3);
   tmpca3 = M3_diff .* tmpca4;
   adimat_push1(tmpca2);
   tmpca2 = sum(tmpca3);
   adimat_push1(tmpca1);
   tmpca1 = w3 * tmpca2;
   adimat_push1(f);
   f = f + tmpca1;
   adimat_push(M1, M2, M3, sigma, N, m, W, M1_est, M2_est, M3_est, A, w1, w2, w3, M3_diff, tmpca1, tmpca2, tmpca3, tmpca4, tmpda1, tmpda2, tmpda3, tmpda4, tmpda5, f, x);
   if nargin > 1
      adimat_push1(params);
   end
   adimat_push1(nargin);
end

function a_x = ret_bigmra_lsq_cost(a_f)
   tmpnargin = adimat_pop1;
   if tmpnargin > 1
      params = adimat_pop1;
   end
   [x f tmpda5 tmpda4 tmpda3 tmpda2 tmpda1 tmpca4 tmpca3 tmpca2 tmpca1 M3_diff w3 w2 w1 A M3_est M2_est M1_est W m N sigma M3 M2 M1] = adimat_pop;
   [a_M1_est a_M2_est a_M3_est a_M3_diff a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_x] = a_zeros(M1_est, M2_est, M3_est, M3_diff, tmpca1, tmpca2, tmpca3, tmpca4, x);
   if nargin < 1
      a_f = a_zeros1(f);
   end
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w3, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   tmpca3 = adimat_pop1;
   a_M3_diff = adimat_adjsum(a_M3_diff, adimat_adjred(M3_diff, a_tmpca3 .* tmpca4));
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, M3_diff .* a_tmpca3));
   a_tmpca3 = a_zeros1(tmpca3);
   tmpca4 = adimat_pop1;
   a_M3_diff = adimat_adjsum(a_M3_diff, call(@conj, a_tmpca4));
   a_tmpca4 = a_zeros1(tmpca4);
   a_M3_est(:) = adimat_adjsum(a_M3_est(:), adimat_adjred(M3_est(:), -a_M3_diff));
   f = adimat_pop1;
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_f));
   tmpsa1 = a_f;
   a_f = a_zeros1(f);
   a_f = adimat_adjsum(a_f, adimat_adjred(f, tmpsa1));
   tmpca1 = adimat_pop1;
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, w2, a_tmpca1));
   a_tmpca1 = a_zeros1(tmpca1);
   tmpca2 = adimat_pop1;
   a_tmpca3 = adimat_adjsum(a_tmpca3, a_sum(a_tmpca2, tmpca3));
   a_tmpca2 = a_zeros1(tmpca2);
   a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjred(tmpca4, 2 .* tmpca4.^1 .* a_tmpca3));
   a_M2_est = adimat_adjsum(a_M2_est, adimat_adjred(M2_est, -a_tmpca4));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjmultr(tmpca1, w1, a_f));
   [tmpadjc1] = adimat_a_mpowerl(tmpca2, 2, a_tmpca1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, tmpadjc1);
   a_M1_est = adimat_adjsum(a_M1_est, adimat_adjred(M1_est, -a_tmpca2));
   M3_est = adimat_pop1;
   tmpsa1 = a_M3_est;
   a_M3_est = a_zeros1(M3_est);
   a_M3_est = adimat_adjsum(a_M3_est, adimat_adjred(M3_est, tmpsa1));
   [tmpda1 tmpda2] = adimat_pop;
   A = adimat_pop_index2(A, 1, ':');
   A = adimat_pop_index2(A, ':', 1);
   M2_est = adimat_pop1;
   tmpsa1 = a_M2_est;
   a_M2_est = a_zeros1(M2_est);
   a_M2_est = adimat_adjsum(a_M2_est, adimat_adjred(M2_est, tmpsa1));
   [tmpadjc1] = ret_bsx(a_M3_est);
   a_x = adimat_adjsum(a_x, tmpadjc1);
   [tmpadjc1] = ret_psx(a_M2_est);
   a_x = adimat_adjsum(a_x, tmpadjc1);
   [tmpadjc1] = ret_mux(a_M1_est);
   a_x = adimat_adjsum(a_x, tmpadjc1);
end

function [a_x nr_mu] = a_mux(x, m, N, a_mu)
% Produce the sliding-window average mean one would see without noise
% 
% x - matrix of size L x K, where each column is a signal
% m - vector of length K, such that x(:, k) appears m(k) times
% N - length of the long observation
%
% mu is a scalar
   [L K] = size(x);
   adimat_push1(m);
   m = m(:);
   assert(length(m) == K);
   tmpca2 = sum(x, 1);
   tmpca1 = tmpca2 * m;
   mu = tmpca1 / N;
   nr_mu = mu;
   [a_tmpca1 a_tmpca2 a_x] = a_zeros(tmpca1, tmpca2, x);
   if nargin < 4
      a_mu = a_zeros1(mu);
   end
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, N, a_mu);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, m));
   a_x = adimat_adjsum(a_x, a_sum(a_tmpca2, x, 1));
   assert(length(m) == K);
   m = adimat_pop1;
end

function mu = rec_mux(x, m, N)
   [L K] = size(x);
   adimat_push1(m);
   m = m(:);
   assert(length(m) == K);
   tmpca2 = sum(x, 1);
   tmpca1 = tmpca2 * m;
   mu = tmpca1 / N;
   adimat_push(L, K, tmpca1, tmpca2, mu, x);
   if nargin > 1
      adimat_push1(m);
   end
   if nargin > 2
      adimat_push1(N);
   end
   adimat_push1(nargin);
end

function a_x = ret_mux(a_mu)
   tmpnargin = adimat_pop1;
   if tmpnargin > 2
      N = adimat_pop1;
   end
   if tmpnargin > 1
      m = adimat_pop1;
   end
   [x mu tmpca2 tmpca1 K L] = adimat_pop;
   [a_tmpca1 a_tmpca2 a_x] = a_zeros(tmpca1, tmpca2, x);
   if nargin < 1
      a_mu = a_zeros1(mu);
   end
   [tmpadjc1] = adimat_a_mrdividel(tmpca1, N, a_mu);
   a_tmpca1 = adimat_adjsum(a_tmpca1, tmpadjc1);
   a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultl(tmpca2, a_tmpca1, m));
   a_x = adimat_adjsum(a_x, a_sum(a_tmpca2, x, 1));
   assert(length(m) == K);
   m = adimat_pop1;
end

function [a_x nr_P] = a_psx(x, m, N, W, a_P)
% Produce the sliding-window average power spectrum one would see w/o noise
% 
% x - matrix of size L x K, where each column is a signal
% m - vector of length K, such that x(:, k) appears m(k) times
% N - length of the long observation
% W - length of the sliding window
%
% P is a vector of length W
   tmpca1 = 0;
   tmpca2 = 0;
   tmpca3 = 0;
   tmpca4 = 0;
   tmpca5 = 0;
   tmpda2 = 0;
   tmpda3 = 0;
   tmpda4 = 0;
   tmpda5 = 0;
   tmpda6 = 0;
   tmpda7 = 0;
   ii = 0;
   [L K] = size(x);
   adimat_push1(m);
   m = m(:);
   assert(length(m) == K);
   P = zeros(W, 1);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda7);
      tmpda7 = W - L;
      adimat_push1(tmpda6);
      tmpda6 = zeros(tmpda7, 1);
      adimat_push1(tmpca5);
      tmpca5 = [x(:, k)
            tmpda6];
      adimat_push1(tmpca4);
      tmpca4 = rec_powerspectrum_from_signal(tmpca5);
      adimat_push1(tmpda3);
      tmpda3 = W - L + 1;
      adimat_push1(tmpda2);
      tmpda2 = m(k) * tmpda3;
      adimat_push1(tmpca1);
      tmpca1 = tmpda2 * tmpca4;
      adimat_push1(P);
      P = P + tmpca1;
      tmpfra2_2 = L - 2;
      adimat_push1(ii);
      for ii=0 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = ii + 1;
         adimat_push1(tmpda5);
         tmpda5 = W - ii - 1;
         adimat_push1(tmpda4);
         tmpda4 = zeros(tmpda5, 1);
         adimat_push1(tmpca3);
         tmpca3 = [tmpda4
               x(1 : tmpda6, k)];
         adimat_push1(tmpca2);
         tmpca2 = rec_powerspectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(P);
         P = P + tmpca1;
      end
      adimat_push1(tmpfra2_2);
      tmpfra2_2 = L - 1;
      adimat_push1(ii);
      for ii=1 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = W - L + ii;
         adimat_push1(tmpda5);
         tmpda5 = zeros(tmpda6, 1);
         adimat_push1(tmpda4);
         tmpda4 = ii + 1;
         adimat_push1(tmpca3);
         tmpca3 = [x(tmpda4 : end, k)
               tmpda5];
         adimat_push1(tmpca2);
         tmpca2 = rec_powerspectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(P);
         P = P + tmpca1;
      end
      adimat_push1(tmpfra2_2);
   end
   adimat_push(tmpfra1_2, P);
   P = P / N;
   nr_P = P;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_x] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, x);
   if nargin < 5
      a_P = a_zeros1(P);
   end
   P = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(P, N, a_P);
   tmpsa1 = a_P;
   a_P = a_zeros1(P);
   a_P = adimat_adjsum(a_P, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpfra2_2 = adimat_pop1;
      for ii=fliplr(1 : tmpfra2_2)
         P = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_P));
         tmpsa1 = a_P;
         a_P = a_zeros1(P);
         a_P = adimat_adjsum(a_P, adimat_adjred(P, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_powerspectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(tmpda4 : end, k) = adimat_adjsum(a_x(tmpda4 : end, k), a_vertcat(a_tmpca3, x(tmpda4 : end, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii tmpfra2_2] = adimat_pop;
      for ii=fliplr(0 : tmpfra2_2)
         P = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_P));
         tmpsa1 = a_P;
         a_P = a_zeros1(P);
         a_P = adimat_adjsum(a_P, adimat_adjred(P, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_powerspectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(1 : tmpda6, k) = adimat_adjsum(a_x(1 : tmpda6, k), a_vertcat(a_tmpca3, tmpda4, x(1 : tmpda6, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii P] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_P));
      tmpsa1 = a_P;
      a_P = a_zeros1(P);
      a_P = adimat_adjsum(a_P, adimat_adjred(P, tmpsa1));
      tmpca1 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, tmpda2, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3] = adimat_pop;
      [tmpadjc1] = ret_powerspectrum_from_signal(a_tmpca4);
      tmpca4 = adimat_pop1;
      a_tmpca5 = adimat_adjsum(a_tmpca5, tmpadjc1);
      a_tmpca4 = a_zeros1(tmpca4);
      tmpca5 = adimat_pop1;
      a_x(:, k) = adimat_adjsum(a_x(:, k), a_vertcat(a_tmpca5, x(:, k)));
      a_tmpca5 = a_zeros1(tmpca5);
      [tmpda6 tmpda7] = adimat_pop;
   end
   assert(length(m) == K);
   m = adimat_pop1;
end

function P = rec_psx(x, m, N, W)
   tmpca1 = 0;
   tmpca2 = 0;
   tmpca3 = 0;
   tmpca4 = 0;
   tmpca5 = 0;
   tmpda2 = 0;
   tmpda3 = 0;
   tmpda4 = 0;
   tmpda5 = 0;
   tmpda6 = 0;
   tmpda7 = 0;
   ii = 0;
   [L K] = size(x);
   adimat_push1(m);
   m = m(:);
   assert(length(m) == K);
   P = zeros(W, 1);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda7);
      tmpda7 = W - L;
      adimat_push1(tmpda6);
      tmpda6 = zeros(tmpda7, 1);
      adimat_push1(tmpca5);
      tmpca5 = [x(:, k)
            tmpda6];
      adimat_push1(tmpca4);
      tmpca4 = rec_powerspectrum_from_signal(tmpca5);
      adimat_push1(tmpda3);
      tmpda3 = W - L + 1;
      adimat_push1(tmpda2);
      tmpda2 = m(k) * tmpda3;
      adimat_push1(tmpca1);
      tmpca1 = tmpda2 * tmpca4;
      adimat_push1(P);
      P = P + tmpca1;
      tmpfra2_2 = L - 2;
      adimat_push1(ii);
      for ii=0 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = ii + 1;
         adimat_push1(tmpda5);
         tmpda5 = W - ii - 1;
         adimat_push1(tmpda4);
         tmpda4 = zeros(tmpda5, 1);
         adimat_push1(tmpca3);
         tmpca3 = [tmpda4
               x(1 : tmpda6, k)];
         adimat_push1(tmpca2);
         tmpca2 = rec_powerspectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(P);
         P = P + tmpca1;
      end
      adimat_push1(tmpfra2_2);
      tmpfra2_2 = L - 1;
      adimat_push1(ii);
      for ii=1 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = W - L + ii;
         adimat_push1(tmpda5);
         tmpda5 = zeros(tmpda6, 1);
         adimat_push1(tmpda4);
         tmpda4 = ii + 1;
         adimat_push1(tmpca3);
         tmpca3 = [x(tmpda4 : end, k)
               tmpda5];
         adimat_push1(tmpca2);
         tmpca2 = rec_powerspectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(P);
         P = P + tmpca1;
      end
      adimat_push1(tmpfra2_2);
   end
   adimat_push(tmpfra1_2, P);
   P = P / N;
   adimat_push(L, K, k, ii, tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, tmpda2, tmpda3, tmpda4, tmpda5, tmpda6, tmpda7, P, x);
   if nargin > 1
      adimat_push1(m);
   end
   if nargin > 2
      adimat_push1(N);
   end
   if nargin > 3
      adimat_push1(W);
   end
   adimat_push1(nargin);
end

function a_x = ret_psx(a_P)
   tmpnargin = adimat_pop1;
   if tmpnargin > 3
      W = adimat_pop1;
   end
   if tmpnargin > 2
      N = adimat_pop1;
   end
   if tmpnargin > 1
      m = adimat_pop1;
   end
   [x P tmpda7 tmpda6 tmpda5 tmpda4 tmpda3 tmpda2 tmpca5 tmpca4 tmpca3 tmpca2 tmpca1 ii k K L] = adimat_pop;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_x] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, x);
   if nargin < 1
      a_P = a_zeros1(P);
   end
   P = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(P, N, a_P);
   tmpsa1 = a_P;
   a_P = a_zeros1(P);
   a_P = adimat_adjsum(a_P, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpfra2_2 = adimat_pop1;
      for ii=fliplr(1 : tmpfra2_2)
         P = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_P));
         tmpsa1 = a_P;
         a_P = a_zeros1(P);
         a_P = adimat_adjsum(a_P, adimat_adjred(P, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_powerspectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(tmpda4 : end, k) = adimat_adjsum(a_x(tmpda4 : end, k), a_vertcat(a_tmpca3, x(tmpda4 : end, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii tmpfra2_2] = adimat_pop;
      for ii=fliplr(0 : tmpfra2_2)
         P = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_P));
         tmpsa1 = a_P;
         a_P = a_zeros1(P);
         a_P = adimat_adjsum(a_P, adimat_adjred(P, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_powerspectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(1 : tmpda6, k) = adimat_adjsum(a_x(1 : tmpda6, k), a_vertcat(a_tmpca3, tmpda4, x(1 : tmpda6, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii P] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_P));
      tmpsa1 = a_P;
      a_P = a_zeros1(P);
      a_P = adimat_adjsum(a_P, adimat_adjred(P, tmpsa1));
      tmpca1 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, tmpda2, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3] = adimat_pop;
      [tmpadjc1] = ret_powerspectrum_from_signal(a_tmpca4);
      tmpca4 = adimat_pop1;
      a_tmpca5 = adimat_adjsum(a_tmpca5, tmpadjc1);
      a_tmpca4 = a_zeros1(tmpca4);
      tmpca5 = adimat_pop1;
      a_x(:, k) = adimat_adjsum(a_x(:, k), a_vertcat(a_tmpca5, x(:, k)));
      a_tmpca5 = a_zeros1(tmpca5);
      [tmpda6 tmpda7] = adimat_pop;
   end
   assert(length(m) == K);
   m = adimat_pop1;
end

function [a_x nr_B] = a_bsx(x, m, N, W, a_B)
% Produce the sliding-window average bispectrum one would see without noise
% 
% x - matrix of size L x K, where each column is a signal
% m - vector of length K, such that x(:, k) appears m(k) times
% N - length of the long observation
% W - length of the sliding window
%
% B is a matrix of size W x W.
   tmpca1 = 0;
   tmpca2 = 0;
   tmpca3 = 0;
   tmpca4 = 0;
   tmpca5 = 0;
   tmpda2 = 0;
   tmpda3 = 0;
   tmpda4 = 0;
   tmpda5 = 0;
   tmpda6 = 0;
   tmpda7 = 0;
   ii = 0;
   [L K] = size(x);
   adimat_push1(m);
   m = m(:);
   assert(length(m) == K);
   B = zeros(W);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda7);
      tmpda7 = W - L;
      adimat_push1(tmpda6);
      tmpda6 = zeros(tmpda7, 1);
      adimat_push1(tmpca5);
      tmpca5 = [x(:, k)
            tmpda6];
      adimat_push1(tmpca4);
      tmpca4 = rec_bispectrum_from_signal(tmpca5);
      adimat_push1(tmpda3);
      tmpda3 = W - L + 1;
      adimat_push1(tmpda2);
      tmpda2 = m(k) * tmpda3;
      adimat_push1(tmpca1);
      tmpca1 = tmpda2 * tmpca4;
      adimat_push1(B);
      B = B + tmpca1;
      tmpfra2_2 = L - 2;
      adimat_push1(ii);
      for ii=0 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = ii + 1;
         adimat_push1(tmpda5);
         tmpda5 = W - ii - 1;
         adimat_push1(tmpda4);
         tmpda4 = zeros(tmpda5, 1);
         adimat_push1(tmpca3);
         tmpca3 = [tmpda4
               x(1 : tmpda6, k)];
         adimat_push1(tmpca2);
         tmpca2 = rec_bispectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(B);
         B = B + tmpca1;
      end
      adimat_push1(tmpfra2_2);
      tmpfra2_2 = L - 1;
      adimat_push1(ii);
      for ii=1 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = W - L + ii;
         adimat_push1(tmpda5);
         tmpda5 = zeros(tmpda6, 1);
         adimat_push1(tmpda4);
         tmpda4 = ii + 1;
         adimat_push1(tmpca3);
         tmpca3 = [x(tmpda4 : end, k)
               tmpda5];
         adimat_push1(tmpca2);
         tmpca2 = rec_bispectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(B);
         B = B + tmpca1;
      end
      adimat_push1(tmpfra2_2);
   end
   adimat_push(tmpfra1_2, B);
   B = B / N;
   nr_B = B;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_x] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, x);
   if nargin < 5
      a_B = a_zeros1(B);
   end
   B = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(B, N, a_B);
   tmpsa1 = a_B;
   a_B = a_zeros1(B);
   a_B = adimat_adjsum(a_B, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpfra2_2 = adimat_pop1;
      for ii=fliplr(1 : tmpfra2_2)
         B = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_B));
         tmpsa1 = a_B;
         a_B = a_zeros1(B);
         a_B = adimat_adjsum(a_B, adimat_adjred(B, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_bispectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(tmpda4 : end, k) = adimat_adjsum(a_x(tmpda4 : end, k), a_vertcat(a_tmpca3, x(tmpda4 : end, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii tmpfra2_2] = adimat_pop;
      for ii=fliplr(0 : tmpfra2_2)
         B = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_B));
         tmpsa1 = a_B;
         a_B = a_zeros1(B);
         a_B = adimat_adjsum(a_B, adimat_adjred(B, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_bispectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(1 : tmpda6, k) = adimat_adjsum(a_x(1 : tmpda6, k), a_vertcat(a_tmpca3, tmpda4, x(1 : tmpda6, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii B] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_B));
      tmpsa1 = a_B;
      a_B = a_zeros1(B);
      a_B = adimat_adjsum(a_B, adimat_adjred(B, tmpsa1));
      tmpca1 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, tmpda2, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3] = adimat_pop;
      [tmpadjc1] = ret_bispectrum_from_signal(a_tmpca4);
      tmpca4 = adimat_pop1;
      a_tmpca5 = adimat_adjsum(a_tmpca5, tmpadjc1);
      a_tmpca4 = a_zeros1(tmpca4);
      tmpca5 = adimat_pop1;
      a_x(:, k) = adimat_adjsum(a_x(:, k), a_vertcat(a_tmpca5, x(:, k)));
      a_tmpca5 = a_zeros1(tmpca5);
      [tmpda6 tmpda7] = adimat_pop;
   end
   assert(length(m) == K);
   m = adimat_pop1;
end

function B = rec_bsx(x, m, N, W)
   tmpca1 = 0;
   tmpca2 = 0;
   tmpca3 = 0;
   tmpca4 = 0;
   tmpca5 = 0;
   tmpda2 = 0;
   tmpda3 = 0;
   tmpda4 = 0;
   tmpda5 = 0;
   tmpda6 = 0;
   tmpda7 = 0;
   ii = 0;
   [L K] = size(x);
   adimat_push1(m);
   m = m(:);
   assert(length(m) == K);
   B = zeros(W);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda7);
      tmpda7 = W - L;
      adimat_push1(tmpda6);
      tmpda6 = zeros(tmpda7, 1);
      adimat_push1(tmpca5);
      tmpca5 = [x(:, k)
            tmpda6];
      adimat_push1(tmpca4);
      tmpca4 = rec_bispectrum_from_signal(tmpca5);
      adimat_push1(tmpda3);
      tmpda3 = W - L + 1;
      adimat_push1(tmpda2);
      tmpda2 = m(k) * tmpda3;
      adimat_push1(tmpca1);
      tmpca1 = tmpda2 * tmpca4;
      adimat_push1(B);
      B = B + tmpca1;
      tmpfra2_2 = L - 2;
      adimat_push1(ii);
      for ii=0 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = ii + 1;
         adimat_push1(tmpda5);
         tmpda5 = W - ii - 1;
         adimat_push1(tmpda4);
         tmpda4 = zeros(tmpda5, 1);
         adimat_push1(tmpca3);
         tmpca3 = [tmpda4
               x(1 : tmpda6, k)];
         adimat_push1(tmpca2);
         tmpca2 = rec_bispectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(B);
         B = B + tmpca1;
      end
      adimat_push1(tmpfra2_2);
      tmpfra2_2 = L - 1;
      adimat_push1(ii);
      for ii=1 : tmpfra2_2
         adimat_push1(tmpda6);
         tmpda6 = W - L + ii;
         adimat_push1(tmpda5);
         tmpda5 = zeros(tmpda6, 1);
         adimat_push1(tmpda4);
         tmpda4 = ii + 1;
         adimat_push1(tmpca3);
         tmpca3 = [x(tmpda4 : end, k)
               tmpda5];
         adimat_push1(tmpca2);
         tmpca2 = rec_bispectrum_from_signal(tmpca3);
         adimat_push1(tmpca1);
         tmpca1 = m(k) * tmpca2;
         adimat_push1(B);
         B = B + tmpca1;
      end
      adimat_push1(tmpfra2_2);
   end
   adimat_push(tmpfra1_2, B);
   B = B / N;
   adimat_push(L, K, k, ii, tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, tmpda2, tmpda3, tmpda4, tmpda5, tmpda6, tmpda7, B, x);
   if nargin > 1
      adimat_push1(m);
   end
   if nargin > 2
      adimat_push1(N);
   end
   if nargin > 3
      adimat_push1(W);
   end
   adimat_push1(nargin);
end

function a_x = ret_bsx(a_B)
   tmpnargin = adimat_pop1;
   if tmpnargin > 3
      W = adimat_pop1;
   end
   if tmpnargin > 2
      N = adimat_pop1;
   end
   if tmpnargin > 1
      m = adimat_pop1;
   end
   [x B tmpda7 tmpda6 tmpda5 tmpda4 tmpda3 tmpda2 tmpca5 tmpca4 tmpca3 tmpca2 tmpca1 ii k K L] = adimat_pop;
   [a_tmpca1 a_tmpca2 a_tmpca3 a_tmpca4 a_tmpca5 a_x] = a_zeros(tmpca1, tmpca2, tmpca3, tmpca4, tmpca5, x);
   if nargin < 1
      a_B = a_zeros1(B);
   end
   B = adimat_pop1;
   [tmpadjc1] = adimat_a_mrdividel(B, N, a_B);
   tmpsa1 = a_B;
   a_B = a_zeros1(B);
   a_B = adimat_adjsum(a_B, tmpadjc1);
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      tmpfra2_2 = adimat_pop1;
      for ii=fliplr(1 : tmpfra2_2)
         B = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_B));
         tmpsa1 = a_B;
         a_B = a_zeros1(B);
         a_B = adimat_adjsum(a_B, adimat_adjred(B, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_bispectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(tmpda4 : end, k) = adimat_adjsum(a_x(tmpda4 : end, k), a_vertcat(a_tmpca3, x(tmpda4 : end, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii tmpfra2_2] = adimat_pop;
      for ii=fliplr(0 : tmpfra2_2)
         B = adimat_pop1;
         a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_B));
         tmpsa1 = a_B;
         a_B = a_zeros1(B);
         a_B = adimat_adjsum(a_B, adimat_adjred(B, tmpsa1));
         tmpca1 = adimat_pop1;
         a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjmultr(tmpca2, m(k), a_tmpca1));
         a_tmpca1 = a_zeros1(tmpca1);
         [tmpadjc1] = ret_bispectrum_from_signal(a_tmpca2);
         tmpca2 = adimat_pop1;
         a_tmpca3 = adimat_adjsum(a_tmpca3, tmpadjc1);
         a_tmpca2 = a_zeros1(tmpca2);
         tmpca3 = adimat_pop1;
         a_x(1 : tmpda6, k) = adimat_adjsum(a_x(1 : tmpda6, k), a_vertcat(a_tmpca3, tmpda4, x(1 : tmpda6, k)));
         a_tmpca3 = a_zeros1(tmpca3);
         [tmpda4 tmpda5 tmpda6] = adimat_pop;
      end
      [ii B] = adimat_pop;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_B));
      tmpsa1 = a_B;
      a_B = a_zeros1(B);
      a_B = adimat_adjsum(a_B, adimat_adjred(B, tmpsa1));
      tmpca1 = adimat_pop1;
      a_tmpca4 = adimat_adjsum(a_tmpca4, adimat_adjmultr(tmpca4, tmpda2, a_tmpca1));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpda2 tmpda3] = adimat_pop;
      [tmpadjc1] = ret_bispectrum_from_signal(a_tmpca4);
      tmpca4 = adimat_pop1;
      a_tmpca5 = adimat_adjsum(a_tmpca5, tmpadjc1);
      a_tmpca4 = a_zeros1(tmpca4);
      tmpca5 = adimat_pop1;
      a_x(:, k) = adimat_adjsum(a_x(:, k), a_vertcat(a_tmpca5, x(:, k)));
      a_tmpca5 = a_zeros1(tmpca5);
      [tmpda6 tmpda7] = adimat_pop;
   end
   assert(length(m) == K);
   m = adimat_pop1;
end

function [a_x nr_P] = a_powerspectrum_from_signal(x, a_P)
% Given signals in x (a matrix whose columns are the vectors),
% returns their power spectra in P (a matrix of same size as x).
   fftx = fft(x);
   tmpca1 = conj(fftx);
   P = fftx .* tmpca1;
   nr_P = P;
   [a_fftx a_tmpca1 a_x] = a_zeros(fftx, tmpca1, x);
   if nargin < 2
      a_P = a_zeros1(P);
   end
   a_fftx = adimat_adjsum(a_fftx, adimat_adjred(fftx, a_P .* tmpca1));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, fftx .* a_P));
   a_fftx = adimat_adjsum(a_fftx, call(@conj, a_tmpca1));
   a_x = adimat_adjsum(a_x, a_fft(a_fftx, 1, x));
end

function P = rec_powerspectrum_from_signal(x)
   fftx = fft(x);
   tmpca1 = conj(fftx);
   P = fftx .* tmpca1;
   adimat_push(fftx, tmpca1, P, x);
end

function a_x = ret_powerspectrum_from_signal(a_P)
   [x P tmpca1 fftx] = adimat_pop;
   [a_fftx a_tmpca1 a_x] = a_zeros(fftx, tmpca1, x);
   if nargin < 1
      a_P = a_zeros1(P);
   end
   a_fftx = adimat_adjsum(a_fftx, adimat_adjred(fftx, a_P .* tmpca1));
   a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, fftx .* a_P));
   a_fftx = adimat_adjsum(a_fftx, call(@conj, a_tmpca1));
   a_x = adimat_adjsum(a_x, a_fft(a_fftx, 1, x));
end

function [a_x nr_B] = a_bispectrum_from_signal(x, a_B)
% Given signals in x (a matrix whose columns are different signals),
% returns their bispectra in B (a 3D matrix whose slices are bispectra).
   tmpca1 = 0;
   tmpca2 = 0;
   tmplia1 = 0;
   [L K] = size(x);
   fftx = fft(x);
   B = zeros(L, L, K);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(tmpca2);
      tmpca2 = rec_circulant_AD(fftx(:, k));
      adimat_push1(tmpca1);
      tmpca1 = fftx(:, k) * fftx(:, k)';
      adimat_push1(tmplia1);
      tmplia1 = tmpca1 .* tmpca2;
      adimat_push_index(B, ':', ':', k);
      B(:, :, k) = tmplia1;
   end
   adimat_push1(tmpfra1_2);
   nr_B = B;
   [a_fftx a_tmpca1 a_tmpca2 a_tmplia1 a_x] = a_zeros(fftx, tmpca1, tmpca2, tmplia1, x);
   if nargin < 2
      a_B = a_zeros1(B);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      B = adimat_pop_index(B, ':', ':', k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_B(:, :, k))));
      a_B = a_zeros_index(a_B, B, ':', ':', k);
      tmplia1 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1 .* tmpca2));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, tmpca1 .* a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      tmpca1 = adimat_pop1;
      a_fftx(:, k) = adimat_adjsum(a_fftx(:, k), adimat_adjmultl(fftx(:, k), a_tmpca1, fftx(:, k)'));
      a_fftx(:, k) = adimat_adjsum(a_fftx(:, k), a_ctranspose(adimat_adjmultr(fftx(:, k)', fftx(:, k), a_tmpca1), fftx(:, k)));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpadjc1] = ret_circulant_AD(a_tmpca2);
      tmpca2 = adimat_pop1;
      a_fftx(:, k) = adimat_adjsum(a_fftx(:, k), tmpadjc1);
      a_tmpca2 = a_zeros1(tmpca2);
   end
   a_x = adimat_adjsum(a_x, a_fft(a_fftx, 1, x));
end

function B = rec_bispectrum_from_signal(x)
   tmpca1 = 0;
   tmpca2 = 0;
   tmplia1 = 0;
   [L K] = size(x);
   fftx = fft(x);
   B = zeros(L, L, K);
   tmpfra1_2 = K;
   for k=1 : tmpfra1_2
      adimat_push1(tmpca2);
      tmpca2 = rec_circulant_AD(fftx(:, k));
      adimat_push1(tmpca1);
      tmpca1 = fftx(:, k) * fftx(:, k)';
      adimat_push1(tmplia1);
      tmplia1 = tmpca1 .* tmpca2;
      adimat_push_index(B, ':', ':', k);
      B(:, :, k) = tmplia1;
   end
   adimat_push(tmpfra1_2, L, K, fftx, k, tmpca1, tmpca2, tmplia1, B, x);
end

function a_x = ret_bispectrum_from_signal(a_B)
   [x B tmplia1 tmpca2 tmpca1 k fftx K L] = adimat_pop;
   [a_fftx a_tmpca1 a_tmpca2 a_tmplia1 a_x] = a_zeros(fftx, tmpca1, tmpca2, tmplia1, x);
   if nargin < 1
      a_B = a_zeros1(B);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      B = adimat_pop_index(B, ':', ':', k);
      a_tmplia1 = adimat_adjsum(a_tmplia1, adimat_adjred(tmplia1, adimat_adjreshape(tmplia1, a_B(:, :, k))));
      a_B = a_zeros_index(a_B, B, ':', ':', k);
      tmplia1 = adimat_pop1;
      a_tmpca1 = adimat_adjsum(a_tmpca1, adimat_adjred(tmpca1, a_tmplia1 .* tmpca2));
      a_tmpca2 = adimat_adjsum(a_tmpca2, adimat_adjred(tmpca2, tmpca1 .* a_tmplia1));
      a_tmplia1 = a_zeros1(tmplia1);
      tmpca1 = adimat_pop1;
      a_fftx(:, k) = adimat_adjsum(a_fftx(:, k), adimat_adjmultl(fftx(:, k), a_tmpca1, fftx(:, k)'));
      a_fftx(:, k) = adimat_adjsum(a_fftx(:, k), a_ctranspose(adimat_adjmultr(fftx(:, k)', fftx(:, k), a_tmpca1), fftx(:, k)));
      a_tmpca1 = a_zeros1(tmpca1);
      [tmpadjc1] = ret_circulant_AD(a_tmpca2);
      tmpca2 = adimat_pop1;
      a_fftx(:, k) = adimat_adjsum(a_fftx(:, k), tmpadjc1);
      a_tmpca2 = a_zeros1(tmpca2);
   end
   a_x = adimat_adjsum(a_x, a_fft(a_fftx, 1, x));
end

function [a_v nr_C] = a_circulant_AD(v, a_C)
% Given a vector v, returns a circulant matrix C whose first row is v.
%
% Produces same output as gallery('circul', v) but faster because it avoids
% a succession of checks. This code is adapted from Matlab's circul.m.
%
% May 2017
% https://arxiv.org/abs/1705.00641
% https://github.com/NicolasBoumal/MRA
% % % % %     % Make v into a row vector
% % % % %     v = v(:).';
% % % % %     n = length(v);
% % % % % 
% % % % %     if n == 1
% % % % %         C = v;
% % % % %     else
% % % % %         C = toeplitz([v(1), v(n:-1:2)], v);
% % % % %     end
% Changed for AD because Toeplitz not implemented in ADiMat
% Make v into a row vector
   tmpda1 = 0;
   tmpda2 = 0;
   adimat_push1(v);
   v = v(:).';
   n = length(v);
   C = zeros(n, n);
   tmpfra1_2 = n;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda2);
      tmpda2 = k - 1;
      adimat_push1(tmpda1);
      tmpda1 = [k : n 1 : tmpda2];
      adimat_push_index2(C, k, tmpda1);
      C(k, tmpda1) = v;
   end
   adimat_push1(tmpfra1_2);
   nr_C = C;
   a_v = a_zeros1(v);
   if nargin < 2
      a_C = a_zeros1(C);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      C = adimat_pop_index2(C, k, tmpda1);
      a_v = adimat_adjsum(a_v, adimat_adjred(v, adimat_adjreshape(v, a_C(k, tmpda1))));
      a_C = a_zeros_index2(a_C, C, k, tmpda1);
      [tmpda1 tmpda2] = adimat_pop;
   end
   v = adimat_pop1;
   tmpsa1 = a_v;
   a_v = a_zeros1(v);
   a_v(:) = adimat_adjsum(a_v(:), tmpsa1.');
end

function C = rec_circulant_AD(v)
   tmpda1 = 0;
   tmpda2 = 0;
   adimat_push1(v);
   v = v(:).';
   n = length(v);
   C = zeros(n, n);
   tmpfra1_2 = n;
   for k=1 : tmpfra1_2
      adimat_push1(tmpda2);
      tmpda2 = k - 1;
      adimat_push1(tmpda1);
      tmpda1 = [k : n 1 : tmpda2];
      adimat_push_index2(C, k, tmpda1);
      C(k, tmpda1) = v;
   end
   adimat_push(tmpfra1_2, n, k, tmpda1, tmpda2, C, v);
end

function a_v = ret_circulant_AD(a_C)
   [v C tmpda2 tmpda1 k n] = adimat_pop;
   a_v = a_zeros1(v);
   if nargin < 1
      a_C = a_zeros1(C);
   end
   tmpfra1_2 = adimat_pop1;
   for k=fliplr(1 : tmpfra1_2)
      C = adimat_pop_index2(C, k, tmpda1);
      a_v = adimat_adjsum(a_v, adimat_adjred(v, adimat_adjreshape(v, a_C(k, tmpda1))));
      a_C = a_zeros_index2(a_C, C, k, tmpda1);
      [tmpda1 tmpda2] = adimat_pop;
   end
   v = adimat_pop1;
   tmpsa1 = a_v;
   a_v = a_zeros1(v);
   a_v(:) = adimat_adjsum(a_v(:), tmpsa1.');
end
